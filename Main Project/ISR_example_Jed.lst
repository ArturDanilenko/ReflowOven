0000              1   ; This program tests the LTC2308 avaliable in the newer version of the DE1-SoC board.
0000              2   ; Access to the input pins of the ADC is avalible at connector J15. Here is the top
0000              3   ; view of the connector:
0000              4   ;
0000              5   ; +--+
0000              6   ; |  | <-- Red power button
0000              7   ; +--+
0000              8   ;
0000              9   ; +-----+-----+
0000             10   ; + GND | IN7 |
0000             11   ; +-----+-----+
0000             12   ; + IN6 | IN5 |
0000             13   ; +-----+-----+
0000             14   ; + IN4 | IN3 |
0000             15   ; +-----+-----+
0000             16   ; + IN2 | IN1 |
0000             17   ; ------+-----+
0000             18   ; + IN0 | 5V  |
0000             19   ; +-----+-----+
0000             20   ;      J15
0000             21   ; 
0000             22   ; Displays the result using the 7-segment displays and also sends it via the serial port to PUTTy.
0000             23   ;
0000             24   ; (c) Jesus Calvino-Fraga 2019
0000             25   ;
                 27   $LIST
0000             29   
0000             30   ; Bits used to access the LTC2308
0000             31   LTC2308_MISO bit 0xF8 ; Read only bit
0000             32   LTC2308_MOSI bit 0xF9 ; Write only bit
0000             33   LTC2308_SCLK bit 0xFA ; Write only bit
0000             34   LTC2308_ENN  bit 0xFB ; Write only bit
0000             35   
0000             36   CLK EQU 33333333
0000             37   BAUD EQU 115200
0000             38   TIMER_2_RELOAD EQU (65536-(CLK/(32*BAUD)))
0000             39   TIMER_0_1ms EQU (65536-(CLK/(12*1000)))
0000             40   
0000             41   ;;
0000             42   ;;
0000             43   ;; PUSH BUTTON DEFINITIONS
0000             44   ;;
0000             45   ;;
0000             46   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             47   TIMER0_RELOAD EQU ((65536-(CLK/(12*TIMER0_RATE)))) ; The prescaler in the CV-8052 is 12 unlike the AT89LP51RC2 where is 1.
0000             48   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             49   TIMER2_RELOAD EQU ((65536-(CLK/(12*TIMER2_RATE))))
0000             50   
0000             51   
0000             52   ; Reset vector
0000             53   org 0x0000
0000 02029F      54       ljmp MainProgram
0003             55   
0003             56   ; External interrupt 0 vector (not used in this code)
0003             57   org 0x0003
0003 32          58            reti
0004             59   
0004             60   ; Timer/Counter 0 overflow interrupt vector
000B             61   org 0x000B
000B 020247      62            ljmp Timer0_ISR
000E             63   
000E             64   ; External interrupt 1 vector (not used in this code)
0013             65   org 0x0013
0013 32          66            reti
0014             67   
0014             68   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             69   org 0x001B
001B 32          70            reti
001C             71   
001C             72   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             73   org 0x0023 
0023 32          74            reti
0024             75            
0024             76   ; Timer/Counter 2 overflow interrupt vector
002B             77   org 0x002B
002B 020269      78            ljmp Timer2_ISR
002E             79            
002E             80   SOUND_OUT     equ P1.0
002E             81   UPDOWN        equ SWA.0
002E             82   
002E             83   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             84   dseg at 0x30
0030             85   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             86   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             87   
0033             88   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0033             89   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             90   bseg
0000             91   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             92   
002E             93   cseg     
002E             94   BJTBase equ P0.0
002E             95   ELCD_RS equ P1.2
002E             96   ELCD_RW equ P1.3
002E             97   ELCD_E  equ P1.4
002E             98   ELCD_D4 equ P1.5
002E             99   ELCD_D5 equ P1.6
002E            100   ELCD_D6 equ P1.7
002E            101   ELCD_D7 equ P0.6
002E            102   
                104   	$LIST
020A            106   
020A            107   ; Look-up table for the 7-seg displays. (Segments are turn on with zero) 
020A            108   T_7seg:
020A 40792430   109       DB 40H, 79H, 24H, 30H, 19H, 12H, 02H, 78H, 00H, 10H
     19120278
     0010
0214            110   
0214            111   ;;----------------------;;
0214            112   ; BCD Variables
0214            113   ;;----------------------;;
0214            114   
0214 0D0A4C54   115   InitialString: db '\r\nLTC2308 test program\r\n', 0
     43323330
     38207465
     73742070
     726F6772
     616D0D0A
     00
022D 436F756E   116   myCount: db 'Count:', 0
     743A00
0234            117   
0234            118   ; Wait 1 millisecond using Timer 0
0234            119   Timer0_Init:
0234 E589       120            mov a, TMOD
0236 54F0       121            anl a, #0xf0 ; Clear the bits for timer 0
0238 4401       122            orl a, #0x01 ; Configure timer 0 as 16-timer
023A F589       123            mov TMOD, a
023C 758CFD     124            mov TH0, #high(TIMER0_RELOAD)
023F 758A5A     125            mov TL0, #low(TIMER0_RELOAD)
0242            126            ; Enable the timer and interrupts
0242 D2A9       127       setb ET0  ; Enable timer 0 interrupt
0244 D28C       128       setb TR0  ; Start timer 0
0246 22         129            ret
0247            130   
0247            131   ;---------------------------------;
0247            132   ; ISR for timer 0.  Set to execute;
0247            133   ; every 1/4096Hz to generate a    ;
0247            134   ; 2048 Hz square wave at pin P3.7 ;
0247            135   ;---------------------------------;
0247            136   Timer0_ISR:
0247            137            ;clr TF0  ; According to the data sheet this is done for us already.
0247 758CFD     138            mov TH0, #high(TIMER0_RELOAD) ; Timer 0 doesn't have autoreload in the CV-8052
024A 758A5A     139            mov TL0, #low(TIMER0_RELOAD)
024D B290       140            cpl SOUND_OUT ; Connect speaker to P3.7!
024F 32         141            reti
0250            142   
0250            143   ;---------------------------------;
0250            144   ; Routine to initialize the ISR   ;
0250            145   ; for timer 2                     ;
0250            146   ;---------------------------------;
0250            147   Timer2_Init:
0250 75C800     148            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0253 75CDF5     149            mov TH2, #high(TIMER2_RELOAD)
0256 75CC27     150            mov TL2, #low(TIMER2_RELOAD)
0259            151            ; Set the reload value
0259 75CBF5     152            mov RCAP2H, #high(TIMER2_RELOAD)
025C 75CA27     153            mov RCAP2L, #low(TIMER2_RELOAD)
025F            154            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
025F E4         155            clr a
0260 F530       156            mov Count1ms+0, a
0262 F531       157            mov Count1ms+1, a
0264            158            ; Enable the timer and interrupts
0264 D2AD       159       setb ET2  ; Enable timer 2 interrupt
0266 D2CA       160       setb TR2  ; Enable timer 2
0268 22         161            ret
0269            162   
0269            163   ;---------------------------------;
0269            164   ; ISR for timer 2                 ;
0269            165   ;---------------------------------;
0269            166   Timer2_ISR:
0269 C2CF       167            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
026B            168   ;        cpl P1.1 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
026B            169            
026B            170            ; The two registers used in the ISR must be saved in the stack
026B C0E0       171            push acc
026D C0D0       172            push psw
026F            173            
026F            174            ; Increment the 16-bit one mili second counter
026F 0530       175            inc Count1ms+0    ; Increment the low 8-bits first
0271 E530       176            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0273 7002       177            jnz Inc_Done
0275 0531       178            inc Count1ms+1
0277            179   
0277            180   Inc_Done:
0277            181            ; Check if half second has passed
0277 E530       182            mov a, Count1ms+0
0279 B4F41E     183            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
027C E531       184            mov a, Count1ms+1
027E B40119     185            cjne a, #high(500), Timer2_ISR_done
0281            186            
0281            187            ; 500 milliseconds have passed.  Set a flag so the main program knows
0281 D200       188            setb half_seconds_flag ; Let the main program know half second had passed
0283            189            ; Toggle LEDR0 so it blinks
0283 B2E8       190            cpl LEDRA.0
0285 B28C       191            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0287            192            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0287 E4         193            clr a
0288 F530       194            mov Count1ms+0, a
028A F531       195            mov Count1ms+1, a
028C            196            ; Increment the BCD counter
028C E532       197            mov a, BCD_counter
028E 20E804     198            jb UPDOWN, Timer2_ISR_decrement
0291 2401       199            add a, #0x01
0293 8002       200            sjmp Timer2_ISR_da
0295            201   Timer2_ISR_decrement:
0295 2499       202            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0297            203   Timer2_ISR_da:
0297 D4         204            da a ; Decimal adjust instruction.  Check datasheet for more details!
0298 F532       205            mov BCD_counter, a
029A            206            
029A            207   Timer2_ISR_done:
029A D0D0       208            pop psw
029C D0E0       209            pop acc
029E 32         210            reti
029F            211   
029F            212   
029F            213   MainProgram:
029F 75817F     214       mov sp, #0x7f
02A2 D2AF       215       setb EA
02A4            216       
02A4 120250     217       lcall Timer2_Init
02A7 120234     218       lcall Timer0_Init
02AA            219       
02AA            220      
02AA 12013A     221       lcall Initialize_LEDs
02AD            222     
02AD            223       
02AD 120141     224       lcall Initialize_ADC
02B0 12012D     225         lcall Initialize_Serial_Port
02B3            226       
02B3            227       
02B3            228       
02B3 759AFF     229       mov P0MOD, #11111111b ; P0.0 to P0.6 are outputs.  ('1' makes the pin output)
02B6            230       ; We use pins P1.0 and P1.1 as outputs also.  Configure accordingly.
02B6 759BFF     231       mov P1MOD, #11111111b ; P1.0 and P1.0 are outputs
02B9 12018D     232       lcall ELCD_4BIT
02BC C0E0       233            push acc
02BE 7401       233            mov a, #1
02C0 14         233            dec a
02C1 1201EF     233            lcall ?Set_Cursor_1 ; Select column and row
02C4 D0E0       233            pop acc
02C6 C083       234            push dph
02C8 C082       234            push dpl
02CA C0E0       234            push acc
02CC 90022D     234            mov dptr, #myCount
02CF 1201E2     234            lcall ?Send_Constant_String
02D2 D0E0       234            pop acc
02D4 D082       234            pop dpl
02D6 D083       234            pop dph
02D8            235   
02D8            236   
02D8            237   forever:
02D8 E5E8       238            mov a, SWA ; read the channel to convert from the switches
02DA 5407       239            anl a, #00000111B ; We need only the last three bits since there are only eight channels
02DC F5F0       240            mov b, a
02DE 1200BE     241            lcall LTC2308_RW  ; Read the channel from the ADC
02E1 1200A0     242            lcall hex2bcd16   ; Convert to bcd
02E4 12007B     243            lcall Display_BCD1 ; Display using the 7-segment displays
02E7 12004E     244            lcall SendNumber  ; Send to serial port
02EA            245            
02EA C0E0       246            push acc
02EC 7407       246            mov a, #7
02EE 14         246            dec a
02EF 1201EF     246            lcall ?Set_Cursor_1 ; Select column and row
02F2 D0E0       246            pop acc
02F4 C000       247            push ar0
02F6 A832       247            mov r0, BCD_counter
02F8 1201F4     247            lcall ?Display_BCD
02FB D000       247            pop ar0
02FD            248            
02FD            249            
02FD 7AFA       250            mov R2, #250
02FF 1201DC     251            lcall MyDelay
0302            252            
0302            253   
0302            254   end
