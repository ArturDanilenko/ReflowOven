0000              1   ; This program tests the LTC2308 avaliable in the newer version of the DE1-SoC board.
0000              2   ; Access to the input pins of the ADC is avalible at connector J15. Here is the top
0000              3   ; view of the connector:
0000              4   ;
0000              5   ; +--+
0000              6   ; |  | <-- Red power button
0000              7   ; +--+
0000              8   ;
0000              9   ; +-----+-----+
0000             10   ; + GND | IN7 |
0000             11   ; +-----+-----+
0000             12   ; + IN6 | IN5 |
0000             13   ; +-----+-----+
0000             14   ; + IN4 | IN3 |
0000             15   ; +-----+-----+
0000             16   ; + IN2 | IN1 |
0000             17   ; ------+-----+
0000             18   ; + IN0 | 5V  |
0000             19   ; +-----+-----+
0000             20   ;      J15
0000             21   ; 
0000             22   ; Displays the result using the 7-segment displays and also sends it via the serial port to PUTTy.
0000             23   ;
0000             24   ; (c) Jesus Calvino-Fraga 2019
0000             25   ;
                 27   $LIST
0000             29   
0000             30   ; Bits used to access the LTC2308
0000             31   LTC2308_MISO bit 0xF8 ; Read only bit
0000             32   LTC2308_MOSI bit 0xF9 ; Write only bit
0000             33   LTC2308_SCLK bit 0xFA ; Write only bit
0000             34   LTC2308_ENN  bit 0xFB ; Write only bit
0000             35   
0000             36   CLK EQU 33333333
0000             37   BAUD EQU 115200
0000             38   TIMER_2_RELOAD EQU (65536-(CLK/(32*BAUD)))
0000             39   TIMER_0_1ms EQU (65536-(CLK/(12*1000)))
0000             40   
0000             41   ; Reset vector
0000             42   org 0x0000
0000 02017F      43            ljmp MainProgram
0003             44   
0003             45   ; External interrupt 0 vector (not used in this code)
0003             46   org 0x0003
0003 32          47            reti
0004             48   
0004             49   ; Timer/Counter 0 overflow interrupt vector (not used in this code)
000B             50   org 0x000B
000B 32          51            reti
000C             52   
000C             53   ; External interrupt 1 vector (not used in this code)
0013             54   org 0x0013
0013 32          55            reti
0014             56   
0014             57   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             58   org 0x001B
001B 32          59            reti
001C             60   
001C             61   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             62   org 0x0023 
0023 32          63            reti
0024             64            
0024             65   ; Timer/Counter 2 overflow interrupt vector (not used in this code)
002B             66   org 0x002B
002B 32          67            reti
002C             68            
002C             69   BJTBase equ P0.0
002C             70   
002C             71   Initialize_Serial_Port:
002C             72       ; Initialize serial port and baud rate using timer 2
002C 75CBFF      73            mov RCAP2H, #high(TIMER_2_RELOAD)
002F 75CAF7      74            mov RCAP2L, #low(TIMER_2_RELOAD)
0032 75C834      75            mov T2CON, #0x34 ; #00110100B
0035 759852      76            mov SCON, #0x52 ; Serial port in mode 1, ren, txrdy, rxempty
0038 22          77            ret
0039             78   
0039             79   putchar:
0039 109902      80            jbc     TI,putchar_L1
003C 80FB        81            sjmp putchar
003E             82   putchar_L1:
003E F599        83            mov     SBUF,a
0040 22          84            ret
0041             85            
0041             86   getchar:
0041 109802      87            jbc     RI,getchar_L1
0044 80FB        88            sjmp getchar
0046             89   getchar_L1:
0046 E599        90            mov     a,SBUF
0048 22          91            ret
0049             92   
0049             93   SendString:
0049 E4          94       clr a
004A 93          95       movc a, @a+dptr
004B 6006        96       jz SendString_L1
004D 120039      97       lcall putchar
0050 A3          98       inc dptr
0051 80F6        99       sjmp SendString  
0053            100   SendString_L1:
0053 22         101            ret
0054            102            
0054            103   Initialize_LEDs:
0054            104       ; Turn off LEDs
0054 75E800     105            mov     LEDRA,#0x00
0057 759500     106            mov     LEDRB,#0x00
005A 22         107            ret
005B            108            
005B            109   Initialize_ADC:
005B            110            ; Initialize SPI pins connected to LTC2308
005B C2F9       111            clr     LTC2308_MOSI
005D C2FA       112            clr     LTC2308_SCLK
005F D2FB       113            setb LTC2308_ENN
0061 22         114            ret
0062            115   
0062            116   LTC2308_Toggle_Pins:
0062 92F9       117       mov LTC2308_MOSI, c
0064 D2FA       118       setb LTC2308_SCLK
0066 A2F8       119       mov c, LTC2308_MISO
0068 C2FA       120       clr LTC2308_SCLK
006A 22         121       ret
006B            122   
006B            123   ; Bit-bang communication with LTC2308.  Check Figure 8 in datasheet (page 18):
006B            124   ; https://www.analog.com/media/en/technical-documentation/data-sheets/2308fc.pdf
006B            125   ; The VREF for this 12-bit ADC is 4.096V
006B            126   ; Warning: we are reading the previously converted channel! If you want to read the
006B            127   ; channel 'now' call this function twice.
006B            128   ;
006B            129   ; Channel to read passed in register 'b'.  Result in R1 (bits 11 downto 8) and R0 (bits 7 downto 0).
006B            130   ; Notice the weird order of the channel select bits!
006B            131   LTC2308_RW:
006B E4         132       clr a 
006C C2FB       133            clr     LTC2308_ENN ; Enable ADC
006E            134   
006E            135       ; Send 'S/D', get bit 11
006E D3         136       setb c ; S/D=1 for single ended conversion
006F 120062     137       lcall LTC2308_Toggle_Pins
0072 92E3       138       mov acc.3, c
0074            139       ; Send channel bit 0, get bit 10
0074 A2F2       140       mov c, b.2 ; O/S odd channel select
0076 120062     141       lcall LTC2308_Toggle_Pins
0079 92E2       142       mov acc.2, c 
007B            143       ; Send channel bit 1, get bit 9
007B A2F0       144       mov c, b.0 ; S1
007D 120062     145       lcall LTC2308_Toggle_Pins
0080 92E1       146       mov acc.1, c
0082            147       ; Send channel bit 2, get bit 8
0082 A2F1       148       mov c, b.1 ; S0
0084 120062     149       lcall LTC2308_Toggle_Pins
0087 92E0       150       mov acc.0, c
0089 F9         151       mov R1, a
008A            152       
008A            153       ; Now receive the lest significant eight bits
008A E4         154       clr a 
008B            155       ; Send 'UNI', get bit 7
008B D3         156       setb c ; UNI=1 for unipolar output mode
008C 120062     157       lcall LTC2308_Toggle_Pins
008F 92E7       158       mov acc.7, c
0091            159       ; Send 'SLP', get bit 6
0091 C3         160       clr c ; SLP=0 for NAP mode
0092 120062     161       lcall LTC2308_Toggle_Pins
0095 92E6       162       mov acc.6, c
0097            163       ; Send '0', get bit 5
0097 C3         164       clr c
0098 120062     165       lcall LTC2308_Toggle_Pins
009B 92E5       166       mov acc.5, c
009D            167       ; Send '0', get bit 4
009D C3         168       clr c
009E 120062     169       lcall LTC2308_Toggle_Pins
00A1 92E4       170       mov acc.4, c
00A3            171       ; Send '0', get bit 3
00A3 C3         172       clr c
00A4 120062     173       lcall LTC2308_Toggle_Pins
00A7 92E3       174       mov acc.3, c
00A9            175       ; Send '0', get bit 2
00A9 C3         176       clr c
00AA 120062     177       lcall LTC2308_Toggle_Pins
00AD 92E2       178       mov acc.2, c
00AF            179       ; Send '0', get bit 1
00AF C3         180       clr c
00B0 120062     181       lcall LTC2308_Toggle_Pins
00B3 92E1       182       mov acc.1, c
00B5            183       ; Send '0', get bit 0
00B5 C3         184       clr c
00B6 120062     185       lcall LTC2308_Toggle_Pins
00B9 92E0       186       mov acc.0, c
00BB F8         187       mov R0, a
00BC            188   
00BC D2FB       189            setb LTC2308_ENN ; Disable ADC
00BE            190   
00BE 22         191            ret
00BF            192   
00BF            193   ; Converts the 16-bit hex number in [R1,R0] to a 
00BF            194   ; 5-digit packed BCD in [R4,R3,R2] using the
00BF            195   ; double-dabble algorithm.
00BF            196   hex2bcd16:
00BF E4         197            clr a
00C0 FC         198            mov R4, a ; Initialize BCD to 00-00-00 
00C1 FB         199            mov R3, a
00C2 FA         200            mov R2, a
00C3 7D10       201            mov R5, #16  ; Loop counter.
00C5            202   
00C5            203   hex2bcd16_L1:
00C5            204            ; Shift binary left     
00C5 E9         205            mov a, R1
00C6 A2E7       206            mov c, acc.7 ; This way [R1,R0] remains unchanged!
00C8 E8         207            mov a, R0
00C9 33         208            rlc a
00CA F8         209            mov R0, a
00CB E9         210            mov a, R1
00CC 33         211            rlc a
00CD F9         212            mov R1, a
00CE            213       
00CE            214            ; Perform bcd + bcd + carry using BCD arithmetic
00CE EA         215            mov a, R2
00CF 3A         216            addc a, R2
00D0 D4         217            da a
00D1 FA         218            mov R2, a
00D2 EB         219            mov a, R3
00D3 3B         220            addc a, R3
00D4 D4         221            da a
00D5 FB         222            mov R3, a
00D6 EC         223            mov a, R4
00D7 3C         224            addc a, R4
00D8 D4         225            da a
00D9 FC         226            mov R4, a
00DA            227   
00DA DDE9       228            djnz R5, hex2bcd16_L1
00DC            229   
00DC 22         230            ret
00DD            231   
00DD            232   ; Look-up table for the 7-seg displays. (Segments are turn on with zero) 
00DD            233   T_7seg:
00DD 40792430   234       DB 40H, 79H, 24H, 30H, 19H, 12H, 02H, 78H, 00H, 10H
     19120278
     0010
00E7            235   
00E7            236   ; Display the 4-digit bcd stored in [R3,R2] using the 7-segment displays
00E7            237   Display_BCD:
00E7 9000DD     238            mov dptr, #T_7seg
00EA            239            ; Display the channel in HEX5
00EA E5F0       240            mov a, b
00EC 540F       241            anl a, #0x0f
00EE 93         242            movc a, @a+dptr
00EF F58F       243            mov HEX5, a
00F1            244            
00F1            245            ; Display [R3,R2] in HEX3, HEX2, HEX1, HEX0
00F1 EB         246            mov a, R3
00F2 C4         247            swap a
00F3 540F       248            anl a, #0x0f
00F5 93         249            movc a, @a+dptr
00F6 F594       250            mov HEX3, a
00F8            251            
00F8 EB         252            mov a, R3
00F9 540F       253            anl a, #0x0f
00FB 93         254            movc a, @a+dptr
00FC F593       255            mov HEX2, a
00FE            256            
00FE EA         257            mov a, R2
00FF C4         258            swap a
0100 540F       259            anl a, #0x0f
0102 93         260            movc a, @a+dptr
0103 F592       261            mov HEX1, a
0105            262            
0105 EA         263            mov a, R2
0106 540F       264            anl a, #0x0f
0108 93         265            movc a, @a+dptr
0109 F591       266            mov HEX0, a
010B            267            
010B 22         268            ret
010C            269   
010C            270   ; Send a 4-digit BCD number stored in [R3,R2] to the serial port         
010C            271   SendNumber:
010C 740D       272            mov a, #'\r'
010E 120039     273            lcall putchar
0111 EB         274            mov a, R3
0112 C4         275            swap a
0113 540F       276            anl a, #0x0f
0115 4430       277            orl a, #'0'
0117 120039     278            lcall putchar
011A 742E       279            mov a, #'.'
011C 120039     280            lcall putchar
011F EB         281            mov a, R3
0120 540F       282            anl a, #0x0f
0122 4430       283            orl a, #'0'
0124 120039     284            lcall putchar
0127 EA         285            mov a, R2
0128 C4         286            swap a
0129 540F       287            anl a, #0x0f
012B 4430       288            orl a, #'0'
012D 120039     289            lcall putchar
0130 EA         290            mov a, R2
0131 540F       291            anl a, #0x0f
0133 4430       292            orl a, #'0'
0135 120039     293            lcall putchar
0138 22         294            ret
0139            295            
0139            296   ; Wait 1 millisecond using Timer 0
0139            297   Wait1ms:
0139 C28C       298            clr     TR0
013B 74F0       299            mov     a,#0xF0
013D 5589       300            anl     a,TMOD
013F 4401       301            orl     a,#0x01
0141 F589       302            mov     TMOD,a
0143 758CF5     303            mov     TH0, #high(TIMER_0_1ms)
0146 758A27     304            mov     TL0, #low(TIMER_0_1ms)
0149 C28D       305            clr     TF0
014B D28C       306            setb TR0
014D 308DFD     307            jnb     TF0,$
0150 C28C       308            clr     TR0
0152 22         309            ret
0153            310            
0153            311   ; Wait R2 milliseconds
0153            312   MyDelay:
0153 120139     313            lcall Wait1ms
0156 DAFB       314       djnz R2, MyDelay
0158 22         315            ret
0159            316            
0159 0D0A4C54   317   InitialString: db '\r\nLTC2308 test program\r\n', 0
     43323330
     38207465
     73742070
     726F6772
     616D0D0A
     00
0172            318   
0172            319   WaitHalfSec:
0172 7A5A       320            mov R2, #90
0174 79FA       321   L3: mov R1, #250
0176 78FA       322   L2: mov R0, #250
0178 D8FE       323   L1: djnz R0, L1 ; 3 machine cycles-> 3*30ns*250=22.5us
017A D9FA       324            djnz R1, L2 ; 22.5us*250=5.625ms
017C DAF6       325            djnz R2, L3 ; 5.625ms*90=0.506s (approximately)
017E 22         326            ret
017F            327   
017F            328   MainProgram:
017F 75817F     329       mov sp, #0x7f
0182 120054     330       lcall Initialize_LEDs
0185 12002C     331       lcall Initialize_Serial_Port
0188 12005B     332       lcall Initialize_ADC
018B            333       
018B 900159     334       mov dptr, #InitialString
018E 120049     335       lcall SendString
0191            336       ;
0191            337   ;        setb BJTBase
0191            338   ;        cpl BJTBase 
0191 759A01     339            mov P0MOD, #1
0194 75E800     340            mov LEDRA, #0 ;
0197 759500     341            mov LEDRB, #0
019A            342   ;        cpl LEDRA.4
019A            343   
019A            344   forever:
019A E5E8       345            mov a, SWA ; read the channel to convert from the switches
019C 5407       346            anl a, #00000111B ; We need only the last three bits since there are only eight channels
019E F5F0       347            mov b, a
01A0 12006B     348            lcall LTC2308_RW  ; Read the channel from the ADC
01A3 1200BF     349            lcall hex2bcd16   ; Convert to bcd
01A6 1200E7     350            lcall Display_BCD ; Display using the 7-segment displays
01A9 12010C     351            lcall SendNumber  ; Send to serial port
01AC            352   ;        jnb BJTBase, pinpressed
01AC 7AFA       353            mov R2, #250
01AE 120153     354            lcall MyDelay
01B1            355            
01B1            356   ;        sjmp forever
01B1            357   ;pinpressed:
01B1            358            ;cpl LEDRA.4
01B1            359            ;sjmp forever
01B1            360            
01B1            361   M0:
01B1 B2EC       362            cpl LEDRA.4
01B3 120172     363            lcall WaitHalfSec
01B6 80E2       364            sjmp forever
01B8            365   
01B8            366   end
