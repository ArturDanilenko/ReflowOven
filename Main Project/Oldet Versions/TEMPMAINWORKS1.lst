0000              1   ; This program tests the LTC2308 avaliable in the newer version of the DE1-SoC board.
0000              2   ; Access to the input pins of the ADC is avalible at connector J15. Here is the top
0000              3   ; view of the connector:
0000              4   ;
0000              5   ; +--+
0000              6   ; |  | <-- Red power button
0000              7   ; +--+
0000              8   ;
0000              9   ; +-----+-----+
0000             10   ; + GND | IN7 |
0000             11   ; +-----+-----+
0000             12   ; + IN6 | IN5 |
0000             13   ; +-----+-----+
0000             14   ; + IN4 | IN3 |
0000             15   ; +-----+-----+
0000             16   ; + IN2 | IN1 |
0000             17   ; ------+-----+
0000             18   ; + IN0 | 5V  |
0000             19   ; +-----+-----+
0000             20   ;      J15
0000             21   ; 
0000             22   ; Displays the result using the 7-segment displays and also sends it via the serial port to PUTTy.
0000             23   ;
0000             24   ; (c) Jesus Calvino-Fraga 2019
0000             25   ;
                 27   $LIST
0000             29   
0000             30   ; Bits used to access the LTC2308
0000             31   LTC2308_MISO bit 0xF8 ; Read only bit
0000             32   LTC2308_MOSI bit 0xF9 ; Write only bit
0000             33   LTC2308_SCLK bit 0xFA ; Write only bit
0000             34   LTC2308_ENN  bit 0xFB ; Write only bit
0000             35   
0000             36   CLK EQU 33333333
0000             37   BAUD EQU 115200
0000             38   TIMER_2_RELOAD EQU (65536-(CLK/(32*BAUD)))
0000             39   TIMER_0_1ms EQU (65536-(CLK/(12*1000)))
0000             40   
0000             41   ;;
0000             42   ;;
0000             43   ;; PUSH BUTTON DEFINITIONS
0000             44   ;;
0000             45   ;;
0000             46   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             47   TIMER0_RELOAD EQU ((65536-(CLK/(12*TIMER0_RATE)))) ; The prescaler in the CV-8052 is 12 unlike the AT89LP51RC2 where is 1.
0000             48   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             49   TIMER2_RELOAD EQU ((65536-(CLK/(12*TIMER2_RATE))))
0000             50   
0000             51   
0000             52   ; Reset vector
0000             53   org 0x0000
0000 02029B      54       ljmp MainProgram
0003             55   
0003             56   ; External interrupt 0 vector (not used in this code)
0003             57   org 0x0003
0003 32          58            reti
0004             59   
0004             60   ; Timer/Counter 0 overflow interrupt vector
000B             61   org 0x000B
000B 02024B      62            ljmp Timer0_ISR
000E             63   
000E             64   ; External interrupt 1 vector (not used in this code)
0013             65   org 0x0013
0013 32          66            reti
0014             67   
0014             68   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             69   org 0x001B
001B 32          70            reti
001C             71   
001C             72   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             73   org 0x0023 
0023 32          74            reti
0024             75            
0024             76   ; Timer/Counter 2 overflow interrupt vector
002B             77   org 0x002B
002B 020265      78            ljmp Timer2_ISR
002E             79            
002E             80   SOUND_OUT     equ P1.0
002E             81   UPDOWN        equ SWA.0
002E             82   
002E             83   ; Reset vector
002E             84   
002E             85   
002E             86   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             87   dseg at 0x30
0030             88   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             89   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             90   
0033             91   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0033             92   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             93   bseg
0000             94   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             95   
002E             96   cseg     
002E             97   BJTBase equ P0.0
002E             98   ELCD_RS equ P1.2
002E             99   ELCD_RW equ P1.3
002E            100   ELCD_E  equ P1.4
002E            101   ELCD_D4 equ P1.5
002E            102   ELCD_D5 equ P1.6
002E            103   ELCD_D6 equ P1.7
002E            104   ELCD_D7 equ P0.6
002E            105   
                107   	$LIST
020C            109   
020C 0D0A4C54   110   InitialString: db '\r\nLTC2308 test program\r\n', 0
     43323330
     38207465
     73742070
     726F6772
     616D0D0A
     00
0225 48656C6C   111   MyString: db 'Hello213', 0
     6F323133
     00
022E            112   
022E            113   ; Look-up table for the 7-seg displays. (Segments are turn on with zero) 
022E            114   T_7seg:
022E 40792430   115       DB 40H, 79H, 24H, 30H, 19H, 12H, 02H, 78H, 00H, 10H
     19120278
     0010
0238            116   
0238            117   
0238            118   ; Wait 1 millisecond using Timer 0
0238            119            
0238            120   Timer0_Init:
0238 E589       121            mov a, TMOD
023A 54F0       122            anl a, #0xf0 ; Clear the bits for timer 0
023C 4401       123            orl a, #0x01 ; Configure timer 0 as 16-timer
023E F589       124            mov TMOD, a
0240 758CFD     125            mov TH0, #high(TIMER0_RELOAD)
0243 758A5A     126            mov TL0, #low(TIMER0_RELOAD)
0246            127            ; Enable the timer and interrupts
0246 D2A9       128       setb ET0  ; Enable timer 0 interrupt
0248 D28C       129       setb TR0  ; Start timer 0
024A 22         130            ret
024B            131   
024B            132   ;---------------------------------;
024B            133   ; ISR for timer 0.  Set to execute;
024B            134   ; every 1/4096Hz to generate a    ;
024B            135   ; 2048 Hz square wave at pin P3.7 ;
024B            136   ;---------------------------------;
024B            137   Timer0_ISR:
024B            138            ;clr TF0  ; According to the data sheet this is done for us already.
024B            139   ;        mov TH0, #high(TIMER0_RELOAD) ; Timer 0 doesn't have autoreload in the CV-8052
024B            140   ;        mov TL0, #low(TIMER0_RELOAD)
024B            141   ;        cpl SOUND_OUT ; Connect speaker to P3.7!
024B 32         142            reti
024C            143   
024C            144   ;---------------------------------;
024C            145   ; Routine to initialize the ISR   ;
024C            146   ; for timer 2                     ;
024C            147   ;---------------------------------;
024C            148   Timer2_Init:
024C 75C800     149            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
024F 75CDF5     150            mov TH2, #high(TIMER2_RELOAD)
0252 75CC27     151            mov TL2, #low(TIMER2_RELOAD)
0255            152            ; Set the reload value
0255 75CBF5     153            mov RCAP2H, #high(TIMER2_RELOAD)
0258 75CA27     154            mov RCAP2L, #low(TIMER2_RELOAD)
025B            155            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
025B E4         156            clr a
025C F530       157            mov Count1ms+0, a
025E F531       158            mov Count1ms+1, a
0260            159            ; Enable the timer and interrupts
0260 D2AD       160       setb ET2  ; Enable timer 2 interrupt
0262 D2CA       161       setb TR2  ; Enable timer 2
0264 22         162            ret
0265            163   
0265            164   ;---------------------------------;
0265            165   ; ISR for timer 2                 ;
0265            166   ;---------------------------------;
0265            167   Timer2_ISR:
0265 C2CF       168            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0267            169   ;        cpl P1.1 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0267            170            
0267            171            ; The two registers used in the ISR must be saved in the stack
0267 C0E0       172            push acc
0269 C0D0       173            push psw
026B            174            
026B            175            ; Increment the 16-bit one mili second counter
026B 0530       176            inc Count1ms+0    ; Increment the low 8-bits first
026D E530       177            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
026F 7002       178            jnz Inc_Done
0271 0531       179            inc Count1ms+1
0273            180   
0273            181   Inc_Done:
0273            182            ; Check if half second has passed
0273 E530       183            mov a, Count1ms+0
0275 B4F41E     184            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0278 E531       185            mov a, Count1ms+1
027A B40119     186            cjne a, #high(500), Timer2_ISR_done
027D            187            
027D            188            ; 500 milliseconds have passed.  Set a flag so the main program knows
027D D200       189            setb half_seconds_flag ; Let the main program know half second had passed
027F            190            ; Toggle LEDR0 so it blinks
027F B2E8       191            cpl LEDRA.0
0281 B28C       192            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0283            193            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0283 E4         194            clr a
0284 F530       195            mov Count1ms+0, a
0286 F531       196            mov Count1ms+1, a
0288            197            ; Increment the BCD counter
0288 E532       198            mov a, BCD_counter
028A 20E804     199            jb UPDOWN, Timer2_ISR_decrement
028D 2401       200            add a, #0x01
028F 8002       201            sjmp Timer2_ISR_da
0291            202   Timer2_ISR_decrement:
0291 2499       203            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0293            204   Timer2_ISR_da:
0293 D4         205            da a ; Decimal adjust instruction.  Check datasheet for more details!
0294 F532       206            mov BCD_counter, a
0296            207            
0296            208   Timer2_ISR_done:
0296 D0D0       209            pop psw
0298 D0E0       210            pop acc
029A 32         211            reti
029B            212   
029B            213   
029B            214   MainProgram:
029B 75817F     215       mov sp, #0x7f
029E 12013A     216       lcall Initialize_LEDs
02A1 12012D     217       lcall Initialize_Serial_Port
02A4 120141     218       lcall Initialize_ADC
02A7 759AFF     219            mov P0MOD, #11111111b ; P0.0 to P0.6 are outputs.  ('1' makes the pin output)
02AA            220       ; We use pins P1.0 and P1.1 as outputs also.  Configure accordingly.
02AA 759BFF     221       mov P1MOD, #11111111b ; P1.0 and P1.0 are outputs
02AD 12018D     222       lcall ELCD_4BIT
02B0            223       
02B0            224      ; mov dptr, #InitialString
02B0            225      ; lcall SendString
02B0            226       ;
02B0            227   ;        setb BJTBase
02B0            228   ;        cpl BJTBase 
02B0            229   
02B0 C0E0       230            push acc
02B2 7401       230            mov a, #1
02B4 14         230            dec a
02B5 1201EF     230            lcall ?Set_Cursor_1 ; Select column and row
02B8 D0E0       230            pop acc
02BA C083       231            push dph
02BC C082       231            push dpl
02BE C0E0       231            push acc
02C0 900225     231            mov dptr, #MyString
02C3 1201E2     231            lcall ?Send_Constant_String
02C6 D0E0       231            pop acc
02C8 D082       231            pop dpl
02CA D083       231            pop dph
02CC B2EC       232            cpl LEDRA.4
02CE            233   
02CE            234   
02CE            235   forever:
02CE E5E8       236            mov a, SWA ; read the channel to convert from the switches
02D0 5407       237            anl a, #00000111B ; We need only the last three bits since there are only eight channels
02D2 F5F0       238            mov b, a
02D4 1200BE     239            lcall LTC2308_RW  ; Read the channel from the ADC
02D7 1200A0     240            lcall hex2bcd16   ; Convert to bcd
02DA 12007B     241            lcall Display_BCD1 ; Display using the 7-segment displays
02DD 12004E     242            lcall SendNumber  ; Send to serial port
02E0 C0E0       243            push acc
02E2 7401       243            mov a, #1
02E4 14         243            dec a
02E5 1201EF     243            lcall ?Set_Cursor_1 ; Select column and row
02E8 D0E0       243            pop acc
02EA C083       244            push dph
02EC C082       244            push dpl
02EE C0E0       244            push acc
02F0 900225     244            mov dptr, #MyString
02F3 1201E2     244            lcall ?Send_Constant_String
02F6 D0E0       244            pop acc
02F8 D082       244            pop dpl
02FA D083       244            pop dph
02FC            245   ;        jnb BJTBase, pinpressed
02FC 7AFA       246            mov R2, #250
02FE 1201DC     247            lcall MyDelay
0301            248            
0301            249            
0301            250   M0:
0301            251   
0301 B2EC       252            cpl LEDRA.4
0303 80C9       253            sjmp forever
0305            254            
0305            255   
0305            256   
0305            257   end
