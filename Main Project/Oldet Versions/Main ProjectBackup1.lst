0000              1   ; This program tests the LTC2308 avaliable in the newer version of the DE1-SoC board.
0000              2   ; Access to the input pins of the ADC is avalible at connector J15. Here is the top
0000              3   ; view of the connector:
0000              4   ;
0000              5   ; +--+
0000              6   ; |  | <-- Red power button
0000              7   ; +--+
0000              8   ;
0000              9   ; +-----+-----+
0000             10   ; + GND | IN7 |
0000             11   ; +-----+-----+
0000             12   ; + IN6 | IN5 |
0000             13   ; +-----+-----+
0000             14   ; + IN4 | IN3 |
0000             15   ; +-----+-----+
0000             16   ; + IN2 | IN1 |
0000             17   ; ------+-----+
0000             18   ; + IN0 | 5V  |
0000             19   ; +-----+-----+
0000             20   ;      J15
0000             21   ; 
0000             22   ; Displays the result using the 7-segment displays and also sends it via the serial port to PUTTy.
0000             23   ;
0000             24   ; (c) Jesus Calvino-Fraga 2019
0000             25   ;
                 27   $LIST
0000             29   
0000             30   ; Bits used to access the LTC2308
0000             31   LTC2308_MISO bit 0xF8 ; Read only bit
0000             32   LTC2308_MOSI bit 0xF9 ; Write only bit
0000             33   LTC2308_SCLK bit 0xFA ; Write only bit
0000             34   LTC2308_ENN  bit 0xFB ; Write only bit
0000             35   
0000             36   CLK EQU 33333333
0000             37   BAUD EQU 115200
0000             38   TIMER_2_RELOAD EQU (65536-(CLK/(32*BAUD)))
0000             39   TIMER_0_1ms EQU (65536-(CLK/(12*1000)))
0000             40   
0000             41   ;;
0000             42   ;;
0000             43   ;; PUSH BUTTON DEFINITIONS
0000             44   ;;
0000             45   ;;
0000             46   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             47   TIMER0_RELOAD EQU ((65536-(CLK/(12*TIMER0_RATE)))) ; The prescaler in the CV-8052 is 12 unlike the AT89LP51RC2 where is 1.
0000             48   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             49   TIMER2_RELOAD EQU ((65536-(CLK/(12*TIMER2_RATE))))
0000             50   
0000             51   
0000             52   ; Reset vector
0000             53   org 0x0000
0000 02056C      54       ljmp MainProgram
0003             55   
0003             56   ; External interrupt 0 vector (not used in this code)
0003             57   org 0x0003
0003 32          58            reti
0004             59   
0004             60   ; Timer/Counter 0 overflow interrupt vector
000B             61   org 0x000B
000B 020509      62            ljmp Timer0_ISR
000E             63   
000E             64   ; External interrupt 1 vector (not used in this code)
0013             65   org 0x0013
0013 32          66            reti
0014             67   
0014             68   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             69   org 0x001B
001B 32          70            reti
001C             71   
001C             72   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             73   org 0x0023 
0023 32          74            reti
0024             75            
0024             76   ; Timer/Counter 2 overflow interrupt vector
002B             77   org 0x002B
002B 020523      78            ljmp Timer2_ISR
002E             79            
002E             80   SOUND_OUT     equ P1.0
002E             81   UPDOWN        equ SWA.0
002E             82   
002E             83   ; Reset vector
002E             84   
002E             85   
002E             86   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             87   dseg at 0x30
0030             88   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             89   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             90   Result: ds 2
0035             91   x: ds 4
0039             92   y: ds 4
003D             93   bcd: ds 5
0042             94   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0042             95   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             96   bseg
0000             97   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             98   mf: dbit 1
0002             99   
002E            100   cseg     
002E            101   BJTBase equ P0.0
002E            102   ELCD_RS equ P1.2
002E            103   ELCD_RW equ P1.3
002E            104   ELCD_E  equ P1.4
002E            105   ELCD_D4 equ P1.5
002E            106   ELCD_D5 equ P1.6
002E            107   ELCD_D6 equ P1.7
002E            108   ELCD_D7 equ P0.6
002E            109   
002E            110   CE_ADC EQU P0.2 ;out
002E            111   MY_MOSI EQU P0.0;out
002E            112   MY_MISO EQU P2.0;in
002E            113   MY_SCLK EQU P0.1;out
002E            114   
                116   	$LIST
0257            118   
                546   $LIST
                120   $LIST
04C7            122   
04C7 0D0A4C54   123   InitialString: db '\r\nLTC2308 test program\r\n', 0
     43323330
     38207465
     73742070
     726F6772
     616D0D0A
     00
04E0 48656C6C   124   MyString: db 'Hello2qwq13', 0
     6F327177
     71313300
04EC            125   
04EC            126   ; Look-up table for the 7-seg displays. (Segments are turn on with zero) 
04EC            127   T_7seg:
04EC 40792430   128       DB 40H, 79H, 24H, 30H, 19H, 12H, 02H, 78H, 00H, 10H
     19120278
     0010
04F6            129   
04F6            130   
04F6            131   
04F6            132   ; Wait 1 millisecond using Timer 0
04F6            133            
04F6            134   Timer0_Init:
04F6 E589       135            mov a, TMOD
04F8 54F0       136            anl a, #0xf0 ; Clear the bits for timer 0
04FA 4401       137            orl a, #0x01 ; Configure timer 0 as 16-timer
04FC F589       138            mov TMOD, a
04FE 758CFD     139            mov TH0, #high(TIMER0_RELOAD)
0501 758A5A     140            mov TL0, #low(TIMER0_RELOAD)
0504            141            ; Enable the timer and interrupts
0504 D2A9       142       setb ET0  ; Enable timer 0 interrupt
0506 D28C       143       setb TR0  ; Start timer 0
0508 22         144            ret
0509            145   
0509            146   ;---------------------------------;
0509            147   ; ISR for timer 0.  Set to execute;
0509            148   ; every 1/4096Hz to generate a    ;
0509            149   ; 2048 Hz square wave at pin P3.7 ;
0509            150   ;---------------------------------;
0509            151   Timer0_ISR:
0509            152            ;clr TF0  ; According to the data sheet this is done for us already.
0509            153   ;        mov TH0, #high(TIMER0_RELOAD) ; Timer 0 doesn't have autoreload in the CV-8052
0509            154   ;        mov TL0, #low(TIMER0_RELOAD)
0509            155   ;        cpl SOUND_OUT ; Connect speaker to P3.7!
0509 32         156            reti
050A            157   
050A            158   ;---------------------------------;
050A            159   ; Routine to initialize the ISR   ;
050A            160   ; for timer 2                     ;
050A            161   ;---------------------------------;
050A            162   Timer2_Init:
050A 75C800     163            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
050D 75CDF5     164            mov TH2, #high(TIMER2_RELOAD)
0510 75CC27     165            mov TL2, #low(TIMER2_RELOAD)
0513            166            ; Set the reload value
0513 75CBF5     167            mov RCAP2H, #high(TIMER2_RELOAD)
0516 75CA27     168            mov RCAP2L, #low(TIMER2_RELOAD)
0519            169            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0519 E4         170            clr a
051A F530       171            mov Count1ms+0, a
051C F531       172            mov Count1ms+1, a
051E            173            ; Enable the timer and interrupts
051E D2AD       174       setb ET2  ; Enable timer 2 interrupt
0520 D2CA       175       setb TR2  ; Enable timer 2
0522 22         176            ret
0523            177   
0523            178   ;---------------------------------;
0523            179   ; ISR for timer 2                 ;
0523            180   ;---------------------------------;
0523            181   Timer2_ISR:
0523 C2CF       182            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0525            183   ;        cpl P1.1 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0525            184            
0525            185            ; The two registers used in the ISR must be saved in the stack
0525 C0E0       186            push acc
0527 C0D0       187            push psw
0529            188            
0529            189            ; Increment the 16-bit one mili second counter
0529 0530       190            inc Count1ms+0    ; Increment the low 8-bits first
052B E530       191            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
052D 7002       192            jnz Inc_Done
052F 0531       193            inc Count1ms+1
0531            194   
0531            195   Inc_Done:
0531            196            ; Check if half second has passed
0531 E530       197            mov a, Count1ms+0
0533 B4F41E     198            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0536 E531       199            mov a, Count1ms+1
0538 B40119     200            cjne a, #high(500), Timer2_ISR_done
053B            201            
053B            202            ; 500 milliseconds have passed.  Set a flag so the main program knows
053B D200       203            setb half_seconds_flag ; Let the main program know half second had passed
053D            204            ; Toggle LEDR0 so it blinks
053D B2E8       205            cpl LEDRA.0
053F B28C       206            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0541            207            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0541 E4         208            clr a
0542 F530       209            mov Count1ms+0, a
0544 F531       210            mov Count1ms+1, a
0546            211            ; Increment the BCD counter
0546 E532       212            mov a, BCD_counter
0548 20E804     213            jb UPDOWN, Timer2_ISR_decrement
054B 2401       214            add a, #0x01
054D 8002       215            sjmp Timer2_ISR_da
054F            216   Timer2_ISR_decrement:
054F 2499       217            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0551            218   Timer2_ISR_da:
0551 D4         219            da a ; Decimal adjust instruction.  Check datasheet for more details!
0552 F532       220            mov BCD_counter, a
0554            221            
0554            222   Timer2_ISR_done:
0554 D0D0       223            pop psw
0556 D0E0       224            pop acc
0558 32         225            reti
0559            226   
0559            227   Display_BCD_7_Seg:
0559            228            
0559 9004EC     229            mov dptr, #T_7seg
055C            230   
055C E532       231            mov a, BCD_counter
055E C4         232            swap a
055F 540F       233            anl a, #0FH
0561 93         234            movc a, @a+dptr
0562 F592       235            mov HEX1, a
0564            236            
0564 E532       237            mov a, BCD_counter
0566 540F       238            anl a, #0FH
0568 93         239            movc a, @a+dptr
0569 F591       240            mov HEX0, a
056B            241            
056B 22         242            ret
056C            243            
056C            244   MainProgram:
056C 75817F     245       mov sp, #0x7f
056F 12012D     246       lcall Initialize_LEDs
0572            247     ;  lcall Initialize_Serial_Port
0572            248      ; lcall Initialize_ADC
0572 1204F6     249      lcall Timer0_Init
0575 12050A     250       lcall Timer2_Init
0578 759AFF     251            mov P0MOD, #11111111b ; P0.0 to P0.6 are outputs.  ('1' makes the pin output)
057B            252       ; We use pins P1.0 and P1.1 as outputs also.  Configure accordingly.
057B 759BFF     253       mov P1MOD, #11111111b ; P1.0 and P1.0 are outputs
057E D2AF       254       setb EA
0580 1201D8     255       lcall ELCD_4BIT
0583            256       
0583            257      ; mov dptr, #InitialString
0583            258      ; lcall SendString
0583            259       ;
0583            260   ;        setb BJTBase
0583            261   ;        cpl BJTBase 
0583 D200       262            setb half_seconds_flag
0585 C0E0       263            push acc
0587 7401       263            mov a, #1
0589 14         263            dec a
058A 12023A     263            lcall ?Set_Cursor_1 ; Select column and row
058D D0E0       263            pop acc
058F C083       264            push dph
0591 C082       264            push dpl
0593 C0E0       264            push acc
0595 9004E0     264            mov dptr, #MyString
0598 12022D     264            lcall ?Send_Constant_String
059B D0E0       264            pop acc
059D D082       264            pop dpl
059F D083       264            pop dph
05A1 B2EC       265            cpl LEDRA.4
05A3            266   
05A3            267   
05A3            268   forever:
05A3            269   ;        mov a, SWA ; read the channel to convert from the switches
05A3            270   ;        anl a, #00000111B ; We need only the last three bits since there are only eight channels
05A3            271   ;        mov b, a
05A3            272   ;        lcall LTC2308_RW  ; Read the channel from the ADC
05A3            273   ;        lcall hex2bcd16   ; Convert to bcd
05A3            274   ;        lcall Display_BCD1 ; Display using the 7-segment displays
05A3            275   ;        lcall SendNumber  ; Send to serial port
05A3            276            ;Set_Cursor(1,4)
05A3            277            ;Send_Constant_String(#MyString)
05A3            278   ;        jnb BJTBase, pinpressed
05A3 B2EE       279            cpl LEDRA.6
05A5 7AFA       280            mov R2, #250
05A7 C2CA       281            clr TR2 ; Stop timer 2
05A9 E4         282            clr a
05AA F530       283            mov Count1ms+0, a
05AC F531       284            mov Count1ms+1, a
05AE            285            ; Now clear the BCD counter
05AE F532       286            mov BCD_counter, a
05B0 D2CA       287            setb TR2    ; Start timer 2
05B2 C002       288            push AR2
05B4 7AFA       288            mov R2, #250
05B6 12003B     288            lcall ?Wait_Milli_Seconds
05B9 D002       288            pop AR2
05BB C002       289            push AR2
05BD 7AFA       289            mov R2, #250
05BF 12003B     289            lcall ?Wait_Milli_Seconds
05C2 D002       289            pop AR2
05C4 C002       290            push AR2
05C6 7AFA       290            mov R2, #250
05C8 12003B     290            lcall ?Wait_Milli_Seconds
05CB D002       290            pop AR2
05CD C002       291            push AR2
05CF 7AFA       291            mov R2, #250
05D1 12003B     291            lcall ?Wait_Milli_Seconds
05D4 D002       291            pop AR2
05D6            292                                    
05D6 C200       293            clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
05D8            294     ;Send_Constant_String(#Initial_Message1)
05D8 C0E0       295            push acc
05DA 740E       295            mov a, #14
05DC 14         295            dec a
05DD 12023A     295            lcall ?Set_Cursor_1 ; Select column and row
05E0 D0E0       295            pop acc     ; the place in the LCD where we want the BCD counter value
05E2 C000       296            push ar0
05E4 A832       296            mov r0, BCD_counter
05E6 120241     296            lcall ?Display_BCD
05E9 D000       296            pop ar0
05EB 120559     297            lcall Display_BCD_7_Seg
05EE            298            
05EE            299   M0:
05EE            300   
05EE B2EF       301            cpl LEDRA.7
05F0 80B1       302            sjmp forever
05F2            303            
05F2            304   
05F2            305   
05F2            306   end
