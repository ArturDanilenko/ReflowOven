0000              1   ; This program tests the LTC2308 avaliable in the newer version of the DE1-SoC board.
0000              2   ; Access to the input pins of the ADC is avalible at connector J15. Here is the top
0000              3   ; view of the connector:
0000              4   ;
0000              5   ; +--+
0000              6   ; |  | <-- Red power button
0000              7   ; +--+
0000              8   ;
0000              9   ; +-----+-----+
0000             10   ; + GND | IN7 |
0000             11   ; +-----+-----+
0000             12   ; + IN6 | IN5 |
0000             13   ; +-----+-----+
0000             14   ; + IN4 | IN3 |
0000             15   ; +-----+-----+
0000             16   ; + IN2 | IN1 |
0000             17   ; ------+-----+
0000             18   ; + IN0 | 5V  |
0000             19   ; +-----+-----+
0000             20   ;      J15
0000             21   ; 
0000             22   ; Displays the result using the 7-segment displays and also sends it via the serial port to PUTTy.
0000             23   ;
0000             24   ; (c) Jesus Calvino-Fraga 2019
0000             25   ;
                 27   $LIST
0000             29   
0000             30   ; Bits used to access the LTC2308
0000             31   LTC2308_MISO bit 0xF8 ; Read only bit
0000             32   LTC2308_MOSI bit 0xF9 ; Write only bit
0000             33   LTC2308_SCLK bit 0xFA ; Write only bit
0000             34   LTC2308_ENN  bit 0xFB ; Write only bit
0000             35   
0000             36   CLK EQU 33333333
0000             37   BAUD EQU 115200
0000             38   TIMER_2_RELOAD EQU (65536-(CLK/(32*BAUD)))
0000             39   TIMER_0_1ms EQU (65536-(CLK/(12*1000)))
0000             40   
0000             41   ;;
0000             42   ;;
0000             43   ;; PUSH BUTTON DEFINITIONS
0000             44   ;;
0000             45   ;;
0000             46   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             47   TIMER0_RELOAD EQU ((65536-(CLK/(12*TIMER0_RATE)))) ; The prescaler in the CV-8052 is 12 unlike the AT89LP51RC2 where is 1.
0000             48   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             49   TIMER2_RELOAD EQU ((65536-(CLK/(12*TIMER2_RATE))))
0000             50   
0000             51   
0000             52   ; Reset vector
0000             53   org 0x0000
0000 02029B      54       ljmp MainProgram
0003             55   
0003             56   ; External interrupt 0 vector (not used in this code)
0003             57   org 0x0003
0003 32          58            reti
0004             59   
0004             60   ; Timer/Counter 0 overflow interrupt vector
000B             61   org 0x000B
000B 02024B      62            ljmp Timer0_ISR
000E             63   
000E             64   ; External interrupt 1 vector (not used in this code)
0013             65   org 0x0013
0013 32          66            reti
0014             67   
0014             68   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             69   org 0x001B
001B 32          70            reti
001C             71   
001C             72   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             73   org 0x0023 
0023 32          74            reti
0024             75            
0024             76   ; Timer/Counter 2 overflow interrupt vector
002B             77   org 0x002B
002B 020265      78            ljmp Timer2_ISR
002E             79            
002E             80   SOUND_OUT     equ P1.0
002E             81   UPDOWN        equ SWA.0
002E             82   
002E             83   ; Reset vector
002E             84   
002E             85   
002E             86   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             87   dseg at 0x30
0030             88   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             89   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             90   
0033             91   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0033             92   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             93   bseg
0000             94   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             95   
002E             96   cseg     
002E             97   BJTBase equ P0.0
002E             98   ELCD_RS equ P1.2
002E             99   ELCD_RW equ P1.3
002E            100   ELCD_E  equ P1.4
002E            101   ELCD_D4 equ P1.5
002E            102   ELCD_D5 equ P1.6
002E            103   ELCD_D6 equ P1.7
002E            104   ELCD_D7 equ P0.6
002E            105   
                107   	$LIST
01C8            109   
01C8 0D0A4C54   110   InitialString: db '\r\nLTC2308 test program\r\n', 0
     43323330
     38207465
     73742070
     726F6772
     616D0D0A
     00
01E1 48656C6C   111   MyString: db 'Hello213', 0
     6F323133
     00
01EA            112   
01EA            113   Initialize_Serial_Port:
01EA            114       ; Initialize serial port and baud rate using timer 2
01EA 75CBFF     115            mov RCAP2H, #high(TIMER_2_RELOAD)
01ED 75CAF7     116            mov RCAP2L, #low(TIMER_2_RELOAD)
01F0 75C834     117            mov T2CON, #0x34 ; #00110100B
01F3 759852     118            mov SCON, #0x52 ; Serial port in mode 1, ren, txrdy, rxempty
01F6 22         119            ret
01F7            120   
01F7            121   
01F7            122            
01F7            123   Initialize_LEDs:
01F7            124       ; Turn off LEDs
01F7 75E800     125            mov     LEDRA,#0x00
01FA 759500     126            mov     LEDRB,#0x00
01FD 22         127            ret
01FE            128            
01FE            129   Initialize_ADC:
01FE            130            ; Initialize SPI pins connected to LTC2308
01FE C2F9       131            clr     LTC2308_MOSI
0200 C2FA       132            clr     LTC2308_SCLK
0202 D2FB       133            setb LTC2308_ENN
0204 22         134            ret
0205            135   
0205            136   LTC2308_Toggle_Pins:
0205 92F9       137       mov LTC2308_MOSI, c
0207 D2FA       138       setb LTC2308_SCLK
0209 A2F8       139       mov c, LTC2308_MISO
020B C2FA       140       clr LTC2308_SCLK
020D 22         141       ret
020E            142   
020E            143   ; Bit-bang communication with LTC2308.  Check Figure 8 in datasheet (page 18):
020E            144   ; https://www.analog.com/media/en/technical-documentation/data-sheets/2308fc.pdf
020E            145   ; The VREF for this 12-bit ADC is 4.096V
020E            146   ; Warning: we are reading the previously converted channel! If you want to read the
020E            147   ; channel 'now' call this function twice.
020E            148   ;
020E            149   ; Channel to read passed in register 'b'.  Result in R1 (bits 11 downto 8) and R0 (bits 7 downto 0).
020E            150   ; Notice the weird order of the channel select bits!
020E            151   
020E            152   
020E            153   ; Converts the 16-bit hex number in [R1,R0] to a 
020E            154   ; 5-digit packed BCD in [R4,R3,R2] using the
020E            155   ; double-dabble algorithm.
020E            156   
020E            157   
020E            158   
020E            159   ; Look-up table for the 7-seg displays. (Segments are turn on with zero) 
020E            160   T_7seg:
020E 40792430   161       DB 40H, 79H, 24H, 30H, 19H, 12H, 02H, 78H, 00H, 10H
     19120278
     0010
0218            162   
0218            163   ; Display the 4-digit bcd stored in [R3,R2] using the 7-segment displays
0218            164   
0218            165   
0218            166   ; Send a 4-digit BCD number stored in [R3,R2] to the serial port         
0218            167   
0218            168            
0218            169   ; Wait 1 millisecond using Timer 0
0218            170   Wait1ms:
0218 C28C       171            clr     TR0
021A 74F0       172            mov     a,#0xF0
021C 5589       173            anl     a,TMOD
021E 4401       174            orl     a,#0x01
0220 F589       175            mov     TMOD,a
0222 758CF5     176            mov     TH0, #high(TIMER_0_1ms)
0225 758A27     177            mov     TL0, #low(TIMER_0_1ms)
0228 C28D       178            clr     TF0
022A D28C       179            setb TR0
022C 308DFD     180            jnb     TF0,$
022F C28C       181            clr     TR0
0231 22         182            ret
0232            183            
0232            184   ; Wait R2 milliseconds
0232            185   MyDelay:
0232 120218     186            lcall Wait1ms
0235 DAFB       187       djnz R2, MyDelay
0237 22         188            ret
0238            189            
0238            190   Timer0_Init:
0238 E589       191            mov a, TMOD
023A 54F0       192            anl a, #0xf0 ; Clear the bits for timer 0
023C 4401       193            orl a, #0x01 ; Configure timer 0 as 16-timer
023E F589       194            mov TMOD, a
0240 758CFD     195            mov TH0, #high(TIMER0_RELOAD)
0243 758A5A     196            mov TL0, #low(TIMER0_RELOAD)
0246            197            ; Enable the timer and interrupts
0246 D2A9       198       setb ET0  ; Enable timer 0 interrupt
0248 D28C       199       setb TR0  ; Start timer 0
024A 22         200            ret
024B            201   
024B            202   ;---------------------------------;
024B            203   ; ISR for timer 0.  Set to execute;
024B            204   ; every 1/4096Hz to generate a    ;
024B            205   ; 2048 Hz square wave at pin P3.7 ;
024B            206   ;---------------------------------;
024B            207   Timer0_ISR:
024B            208            ;clr TF0  ; According to the data sheet this is done for us already.
024B            209   ;        mov TH0, #high(TIMER0_RELOAD) ; Timer 0 doesn't have autoreload in the CV-8052
024B            210   ;        mov TL0, #low(TIMER0_RELOAD)
024B            211   ;        cpl SOUND_OUT ; Connect speaker to P3.7!
024B 32         212            reti
024C            213   
024C            214   ;---------------------------------;
024C            215   ; Routine to initialize the ISR   ;
024C            216   ; for timer 2                     ;
024C            217   ;---------------------------------;
024C            218   Timer2_Init:
024C 75C800     219            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
024F 75CDF5     220            mov TH2, #high(TIMER2_RELOAD)
0252 75CC27     221            mov TL2, #low(TIMER2_RELOAD)
0255            222            ; Set the reload value
0255 75CBF5     223            mov RCAP2H, #high(TIMER2_RELOAD)
0258 75CA27     224            mov RCAP2L, #low(TIMER2_RELOAD)
025B            225            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
025B E4         226            clr a
025C F530       227            mov Count1ms+0, a
025E F531       228            mov Count1ms+1, a
0260            229            ; Enable the timer and interrupts
0260 D2AD       230       setb ET2  ; Enable timer 2 interrupt
0262 D2CA       231       setb TR2  ; Enable timer 2
0264 22         232            ret
0265            233   
0265            234   ;---------------------------------;
0265            235   ; ISR for timer 2                 ;
0265            236   ;---------------------------------;
0265            237   Timer2_ISR:
0265 C2CF       238            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0267            239   ;        cpl P1.1 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0267            240            
0267            241            ; The two registers used in the ISR must be saved in the stack
0267 C0E0       242            push acc
0269 C0D0       243            push psw
026B            244            
026B            245            ; Increment the 16-bit one mili second counter
026B 0530       246            inc Count1ms+0    ; Increment the low 8-bits first
026D E530       247            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
026F 7002       248            jnz Inc_Done
0271 0531       249            inc Count1ms+1
0273            250   
0273            251   Inc_Done:
0273            252            ; Check if half second has passed
0273 E530       253            mov a, Count1ms+0
0275 B4F41E     254            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0278 E531       255            mov a, Count1ms+1
027A B40119     256            cjne a, #high(500), Timer2_ISR_done
027D            257            
027D            258            ; 500 milliseconds have passed.  Set a flag so the main program knows
027D D200       259            setb half_seconds_flag ; Let the main program know half second had passed
027F            260            ; Toggle LEDR0 so it blinks
027F B2E8       261            cpl LEDRA.0
0281 B28C       262            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0283            263            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0283 E4         264            clr a
0284 F530       265            mov Count1ms+0, a
0286 F531       266            mov Count1ms+1, a
0288            267            ; Increment the BCD counter
0288 E532       268            mov a, BCD_counter
028A 20E804     269            jb UPDOWN, Timer2_ISR_decrement
028D 2401       270            add a, #0x01
028F 8002       271            sjmp Timer2_ISR_da
0291            272   Timer2_ISR_decrement:
0291 2499       273            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0293            274   Timer2_ISR_da:
0293 D4         275            da a ; Decimal adjust instruction.  Check datasheet for more details!
0294 F532       276            mov BCD_counter, a
0296            277            
0296            278   Timer2_ISR_done:
0296 D0D0       279            pop psw
0298 D0E0       280            pop acc
029A 32         281            reti
029B            282   
029B            283   
029B            284   MainProgram:
029B 75817F     285       mov sp, #0x7f
029E 1201F7     286       lcall Initialize_LEDs
02A1 1201EA     287       lcall Initialize_Serial_Port
02A4 1201FE     288       lcall Initialize_ADC
02A7 759AFF     289            mov P0MOD, #11111111b ; P0.0 to P0.6 are outputs.  ('1' makes the pin output)
02AA            290       ; We use pins P1.0 and P1.1 as outputs also.  Configure accordingly.
02AA 759BFF     291       mov P1MOD, #11111111b ; P1.0 and P1.0 are outputs
02AD 120169     292       lcall ELCD_4BIT
02B0            293       
02B0            294      ; mov dptr, #InitialString
02B0            295      ; lcall SendString
02B0            296       ;
02B0            297   ;        setb BJTBase
02B0            298   ;        cpl BJTBase 
02B0            299   
02B0 C0E0       300            push acc
02B2 7401       300            mov a, #1
02B4 14         300            dec a
02B5 1201AB     300            lcall ?Set_Cursor_1 ; Select column and row
02B8 D0E0       300            pop acc
02BA C083       301            push dph
02BC C082       301            push dpl
02BE C0E0       301            push acc
02C0 9001E1     301            mov dptr, #MyString
02C3 12019E     301            lcall ?Send_Constant_String
02C6 D0E0       301            pop acc
02C8 D082       301            pop dpl
02CA D083       301            pop dph
02CC B2EC       302            cpl LEDRA.4
02CE            303   
02CE            304   
02CE            305   forever:
02CE E5E8       306            mov a, SWA ; read the channel to convert from the switches
02D0 5407       307            anl a, #00000111B ; We need only the last three bits since there are only eight channels
02D2 F5F0       308            mov b, a
02D4 1200BE     309            lcall LTC2308_RW  ; Read the channel from the ADC
02D7 1200A0     310            lcall hex2bcd16   ; Convert to bcd
02DA 12007B     311            lcall Display_BCD1 ; Display using the 7-segment displays
02DD 12004E     312            lcall SendNumber  ; Send to serial port
02E0 C0E0       313            push acc
02E2 7401       313            mov a, #1
02E4 14         313            dec a
02E5 1201AB     313            lcall ?Set_Cursor_1 ; Select column and row
02E8 D0E0       313            pop acc
02EA C083       314            push dph
02EC C082       314            push dpl
02EE C0E0       314            push acc
02F0 9001E1     314            mov dptr, #MyString
02F3 12019E     314            lcall ?Send_Constant_String
02F6 D0E0       314            pop acc
02F8 D082       314            pop dpl
02FA D083       314            pop dph
02FC            315   ;        jnb BJTBase, pinpressed
02FC 7AFA       316            mov R2, #250
02FE 120232     317            lcall MyDelay
0301            318            
0301            319            
0301            320   M0:
0301            321   
0301 B2EC       322            cpl LEDRA.4
0303 80C9       323            sjmp forever
0305            324            
0305            325   
0305            326   
0305            327   end
