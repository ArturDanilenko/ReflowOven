0000              1   ; This program tests the LTC2308 avaliable in the newer version of the DE1-SoC board.
0000              2   ; Access to the input pins of the ADC is avalible at connector J15. Here is the top
0000              3   ; view of the connector:
0000              4   ;
0000              5   ; +--+
0000              6   ; |  | <-- Red power button
0000              7   ; +--+
0000              8   ;
0000              9   ; +-----+-----+
0000             10   ; + GND | IN7 |
0000             11   ; +-----+-----+
0000             12   ; + IN6 | IN5 |
0000             13   ; +-----+-----+
0000             14   ; + IN4 | IN3 |
0000             15   ; +-----+-----+
0000             16   ; + IN2 | IN1 |
0000             17   ; ------+-----+
0000             18   ; + IN0 | 5V  |
0000             19   ; +-----+-----+
0000             20   ;      J15
0000             21   ; 
0000             22   ; Displays the result using the 7-segment displays and also sends it via the serial port to PUTTy.
0000             23   ;
0000             24   ; (c) Jesus Calvino-Fraga 2019
0000             25   ;
                 27   $LIST
0000             29   
0000             30   ; Bits used to access the LTC2308
0000             31   LTC2308_MISO bit 0xF8 ; Read only bit
0000             32   LTC2308_MOSI bit 0xF9 ; Write only bit
0000             33   LTC2308_SCLK bit 0xFA ; Write only bit
0000             34   LTC2308_ENN  bit 0xFB ; Write only bit
0000             35   
0000             36   CLK EQU 33333333
0000             37   BAUD EQU 115200
0000             38   TIMER_2_RELOAD EQU (65536-(CLK/(32*BAUD)))
0000             39   TIMER_0_1ms EQU (65536-(CLK/(12*1000)))
0000             40   
0000             41   ;;
0000             42   ;;
0000             43   ;; PUSH BUTTON DEFINITIONS
0000             44   ;;
0000             45   ;;
0000             46   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             47   TIMER0_RELOAD EQU ((65536-(CLK/(12*TIMER0_RATE)))) ; The prescaler in the CV-8052 is 12 unlike the AT89LP51RC2 where is 1.
0000             48   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             49   TIMER2_RELOAD EQU ((65536-(CLK/(12*TIMER2_RATE))))
0000             50   
0000             51   
0000             52   ; Reset vector
0000             53   org 0x0000
0000 020571      54       ljmp MainProgram
0003             55   
0003             56   ; External interrupt 0 vector (not used in this code)
0003             57   org 0x0003
0003 32          58            reti
0004             59   
0004             60   ; Timer/Counter 0 overflow interrupt vector
000B             61   org 0x000B
000B 020517      62            ljmp Timer0_ISR
000E             63   
000E             64   ; External interrupt 1 vector (not used in this code)
0013             65   org 0x0013
0013 32          66            reti
0014             67   
0014             68   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             69   org 0x001B
001B 32          70            reti
001C             71   
001C             72   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             73   org 0x0023 
0023 32          74            reti
0024             75            
0024             76   ; Timer/Counter 2 overflow interrupt vector
002B             77   org 0x002B
002B 02053B      78            ljmp Timer2_ISR
002E             79            
002E             80   SOUND_OUT     equ P1.0
002E             81   UPDOWN        equ SWA.0
002E             82   
002E             83   ; Reset vector
002E             84   
002E             85   
002E             86   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             87   dseg at 0x30
0030             88   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             89   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             90   Result: ds 2
0035             91   x: ds 4
0039             92   y: ds 4
003D             93   bcd: ds 5
0042             94   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0042             95   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             96   bseg
0000             97   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             98   mf: dbit 1
0002             99   
002E            100   cseg     
002E            101   BJTBase equ P0.0;Reasign LATEER S:DGILSBGLISFGL:SFGLR!!!
002E            102   ELCD_RS equ P1.2
002E            103   ELCD_RW equ P1.3
002E            104   ELCD_E  equ P1.4
002E            105   ELCD_D4 equ P1.5
002E            106   ELCD_D5 equ P1.6
002E            107   ELCD_D6 equ P1.7
002E            108   ELCD_D7 equ P0.6
002E            109   
002E            110   CE_ADC EQU P0.2 ;out
002E            111   MY_MOSI EQU P0.0;out
002E            112   MY_MISO EQU P2.0;in
002E            113   MY_SCLK EQU P0.1;out
002E            114   
                116   	$LIST
0264            118   
                546   $LIST
                120   $LIST
04D4            122   
04D4 0D0A4C54   123   InitialString: db '\r\nLTC2308 test program\r\n', 0
     43323330
     38207465
     73742070
     726F6772
     616D0D0A
     00
04ED 48656C6C   124   MyString: db 'Hello213', 0
     6F323133
     00
04F6            125   indent: ;indent to separate numbers in the putty
04F6 0D0A00     126       DB  '\r','\n', 0
04F9 22         127   ret
04FA            128   
04FA            129   ; Look-up table for the 7-seg displays. (Segments are turn on with zero) 
04FA            130   T_7seg:
04FA 40792430   131       DB 40H, 79H, 24H, 30H, 19H, 12H, 02H, 78H, 00H, 10H
     19120278
     0010
0504            132   
0504            133   
0504            134   ; Wait 1 millisecond using Timer 0
0504            135            
0504            136   Timer0_Init:
0504            137            ;cpl LEDRA.7
0504 E589       138            mov a, TMOD
0506 54F0       139            anl a, #0xf0 ; Clear the bits for timer 0
0508 4401       140            orl a, #0x01 ; Configure timer 0 as 16-timer
050A F589       141            mov TMOD, a
050C 758CFD     142            mov TH0, #high(TIMER0_RELOAD)
050F 758A5A     143            mov TL0, #low(TIMER0_RELOAD)
0512            144            ; Enable the timer and interrupts
0512 D2A9       145       setb ET0  ; Enable timer 0 interrupt
0514 D28C       146       setb TR0  ; Start timer 0
0516 22         147            ret
0517            148   
0517            149   ;---------------------------------;
0517            150   ; ISR for timer 0.  Set to execute;
0517            151   ; every 1/4096Hz to generate a    ;
0517            152   ; 2048 Hz square wave at pin P3.7 ;
0517            153   ;---------------------------------;
0517            154   Timer0_ISR:
0517 C28D       155            clr TF0  ; According to the data sheet this is done for us already.
0519 758CFD     156            mov TH0, #high(TIMER0_RELOAD) ; Timer 0 doesn't have autoreload in the CV-8052
051C 758A5A     157            mov TL0, #low(TIMER0_RELOAD)
051F B290       158            cpl SOUND_OUT ; Connect speaker to P3.7!
0521 32         159            reti
0522            160   
0522            161   ;---------------------------------;
0522            162   ; Routine to initialize the ISR   ;
0522            163   ; for timer 2                     ;
0522            164   ;---------------------------------;
0522            165   Timer2_Init:
0522            166    
0522 75C800     167            mov T2CON, #0x00  ; Stop timer/counter.  Autoreload mode.
0525 75CDF5     168            mov TH2, #high(TIMER2_RELOAD)
0528 75CC27     169            mov TL2, #low(TIMER2_RELOAD)
052B            170            ; Set the reload value
052B 75CBF5     171            mov RCAP2H, #high(TIMER2_RELOAD)
052E 75CA27     172            mov RCAP2L, #low(TIMER2_RELOAD)
0531            173            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0531 E4         174            clr a
0532 F530       175            mov Count1ms+0, a
0534 F531       176            mov Count1ms+1, a
0536            177            ; Enable the timer and interrupts
0536 D2AD       178       setb ET2  ; Enable timer 2 interrupt
0538 D2CA       179       setb TR2  ; Enable timer 2
053A            180            ;cpl LEDRA.0
053A 22         181            ret
053B            182   
053B            183   ;---------------------------------;
053B            184   ; ISR for timer 2                 ;
053B            185   ;---------------------------------;
053B            186   Timer2_ISR:
053B            187            
053B C2CF       188            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
053D            189   ;        cpl P1.1 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
053D            190            
053D            191            ; The two registers used in the ISR must be saved in the stack
053D C0E0       192            push acc
053F C0D0       193            push psw
0541            194            
0541            195            ; Increment the 16-bit one mili second counter
0541 0530       196            inc Count1ms+0    ; Increment the low 8-bits first
0543 E530       197            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0545 7002       198            jnz Inc_Done
0547 0531       199            inc Count1ms+1
0549            200   
0549            201   Inc_Done:
0549            202            ; Check if half second has passed
0549 E530       203            mov a, Count1ms+0
054B B4F41E     204            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
054E E531       205            mov a, Count1ms+1
0550 B40119     206            cjne a, #high(500), Timer2_ISR_done
0553            207            
0553            208            ; 500 milliseconds have passed.  Set a flag so the main program knows
0553 D200       209            setb half_seconds_flag ; Let the main program know half second had passed
0555            210            ; Toggle LEDR0 so it blinks
0555 B2E8       211            cpl LEDRA.0
0557 B28C       212            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0559            213            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0559 E4         214            clr a
055A F530       215            mov Count1ms+0, a
055C F531       216            mov Count1ms+1, a
055E            217            ; Increment the BCD counter
055E E532       218            mov a, BCD_counter
0560 20E804     219            jb UPDOWN, Timer2_ISR_decrement
0563 2401       220            add a, #0x01
0565 8002       221            sjmp Timer2_ISR_da
0567            222   Timer2_ISR_decrement:
0567 2499       223            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0569            224   Timer2_ISR_da:
0569 D4         225            da a ; Decimal adjust instruction.  Check datasheet for more details!
056A F532       226            mov BCD_counter, a
056C            227            
056C            228   Timer2_ISR_done:
056C D0D0       229            pop psw
056E D0E0       230            pop acc
0570 32         231            reti
0571            232   
0571            233   
0571            234   MainProgram:
0571 75817F     235       mov sp, #0x7f
0574            236   
0574 12013A     237       lcall Initialize_LEDs
0577            238   
0577 12012D     239       lcall Initialize_Serial_Port
057A 120504     240       lcall Timer0_Init
057D 120522     241       lcall Timer2_Init
0580 120141     242       lcall Initialize_ADC
0583 D2AF       243       setb EA
0585 759AFF     244       mov P0MOD, #11111111b ; P0.0 to P0.6 are outputs.  ('1' makes the pin output)
0588            245       ; We use pins P1.0 and P1.1 as outputs also.  Configure accordingly.
0588 759BFF     246       mov P1MOD, #11111111b ; P1.0 and P1.0 are outputs
058B            247   
058B            248    
058B 1201E5     249       lcall ELCD_4BIT
058E D200       250       setb half_seconds_flag
0590 753200     251       mov BCD_counter, #0x00
0593            252      ; mov dptr, #InitialString
0593            253      ; lcall SendString
0593            254       ;
0593            255   ;        setb BJTBase
0593            256   ;        cpl BJTBase 
0593            257   
0593 C0E0       258            push acc
0595 7401       258            mov a, #1
0597 14         258            dec a
0598 120247     258            lcall ?Set_Cursor_1 ; Select column and row
059B D0E0       258            pop acc
059D C083       259            push dph
059F C082       259            push dpl
05A1 C0E0       259            push acc
05A3 9004ED     259            mov dptr, #MyString
05A6 12023A     259            lcall ?Send_Constant_String
05A9 D0E0       259            pop acc
05AB D082       259            pop dpl
05AD D083       259            pop dph
05AF            260   ;        cpl LEDRA.4
05AF            261   
05AF            262   
05AF            263   forever:
05AF E5E8       264            mov a, SWA ; read the channel to convert from the switches
05B1 5407       265            anl a, #00000111B ; We need only the last three bits since there are only eight channels
05B3 F5F0       266            mov b, a
05B5 1200BE     267            lcall LTC2308_RW  ; Read the channel from the ADC
05B8 1200A0     268            lcall hex2bcd16   ; Convert to bcd
05BB 12007B     269            lcall Display_BCD1 ; Display using the 7-segment displays
05BE 12004E     270            lcall SendNumber  ; Send to serial port
05C1            271            
05C1 C2CA       272            clr TR2 ; Stop timer 2
05C3 E4         273            clr a
05C4 F530       274            mov Count1ms+0, a
05C6 F531       275            mov Count1ms+1, a
05C8            276            ; Now clear the BCD counter
05C8 F532       277            mov BCD_counter, a
05CA D2CA       278            setb TR2    ; Start timer 2
05CC C200       279             clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
05CE            280     ;Send_Constant_String(#Initial_Message1)
05CE C0E0       281            push acc
05D0 740E       281            mov a, #14
05D2 14         281            dec a
05D3 120247     281            lcall ?Set_Cursor_1 ; Select column and row
05D6 D0E0       281            pop acc     ; the place in the LCD where we want the BCD counter value
05D8 C000       282            push ar0
05DA A832       282            mov r0, BCD_counter
05DC 12024E     282            lcall ?Display_BCD
05DF D000       282            pop ar0 ; This macro is also in 'LCD_4bit_DE1SoC.inc'
05E1            283   ;        lcall Display_BCD_7_Seg 
05E1            284   ;        jnb BJTBase, pinpressed
05E1 7AFA       285            mov R2, #250
05E3 120234     286            lcall MyDelay
05E6            287            
05E6            288            
05E6            289   M0:
05E6            290   
05E6            291   ;        cpl LEDRA.4
05E6 80C7       292            sjmp forever
05E8            293            
05E8            294   
05E8            295   
05E8            296   end
