0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Fri Jun 08 20:21:16 2018
0000              5   ;--------------------------------------------------------
                  5   $name CV_Boot_SPI
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Write_XRAM_PARM_2
0000             27            public _seven_seg
0000             28            public _hexval
0000             29            public _dummy_switch
0000             30            public _main
0000             31            public _Manual_Load
0000             32            public _OutWord
0000             33            public _OutByte
0000             34            public _str2hex
0000             35            public _loadintelhex
0000             36            public _Load_Ram_Fast_and_Run_Debugger
0000             37            public _Load_Ram_Fast_and_Run
0000             38            public _Copy_Flash_to_RAM
0000             39            public _FlashBuff
0000             40            public _FlashByte
0000             41            public _Read_XRAM
0000             42            public _Write_XRAM
0000             43            public _EraseSector
0000             44            public _In_Byte_Flash
0000             45            public _getbyte
0000             46            public _chartohex
0000             47            public _sends
0000             48            public _getchare
0000             49            public _inituart
0000             50            public _Check_WIP
0000             51            public _DoSPI
0000             52            public _de2_8052_crt0
0000             53            public _getchar_echo
0000             54            public _buff
0000             55            public _FlashBuff_PARM_3
0000             56            public _FlashBuff_PARM_2
0000             57            public _FlashByte_PARM_2
0000             58            public _putchar
0000             59            public _getchar
0000             60   ;--------------------------------------------------------
0000             61   ; Special Function Registers
0000             62   ;--------------------------------------------------------
0000             63   _P0             DATA 0x80
0000             64   _SP             DATA 0x81
0000             65   _DPL            DATA 0x82
0000             66   _DPH            DATA 0x83
0000             67   _PCON           DATA 0x87
0000             68   _TCON           DATA 0x88
0000             69   _TMOD           DATA 0x89
0000             70   _TL0            DATA 0x8a
0000             71   _TL1            DATA 0x8b
0000             72   _TH0            DATA 0x8c
0000             73   _TH1            DATA 0x8d
0000             74   _P1             DATA 0x90
0000             75   _SCON           DATA 0x98
0000             76   _SBUF           DATA 0x99
0000             77   _P2             DATA 0xa0
0000             78   _IE             DATA 0xa8
0000             79   _P3             DATA 0xb0
0000             80   _IP             DATA 0xb8
0000             81   _PSW            DATA 0xd0
0000             82   _ACC            DATA 0xe0
0000             83   _B              DATA 0xf0
0000             84   _T2CON          DATA 0xc8
0000             85   _RCAP2L         DATA 0xca
0000             86   _RCAP2H         DATA 0xcb
0000             87   _TL2            DATA 0xcc
0000             88   _TH2            DATA 0xcd
0000             89   _DPS            DATA 0x86
0000             90   _DPH1           DATA 0x85
0000             91   _DPL1           DATA 0x84
0000             92   _HEX0           DATA 0x91
0000             93   _HEX1           DATA 0x92
0000             94   _HEX2           DATA 0x93
0000             95   _HEX3           DATA 0x94
0000             96   _HEX4           DATA 0x8e
0000             97   _HEX5           DATA 0x8f
0000             98   _LEDRA          DATA 0xe8
0000             99   _LEDRB          DATA 0x95
0000            100   _SWA            DATA 0xe8
0000            101   _SWB            DATA 0x95
0000            102   _KEY            DATA 0xf8
0000            103   _P0MOD          DATA 0x9a
0000            104   _P1MOD          DATA 0x9b
0000            105   _P2MOD          DATA 0x9c
0000            106   _P3MOD          DATA 0x9d
0000            107   _LCD_CMD        DATA 0xd8
0000            108   _LCD_DATA       DATA 0xd9
0000            109   _LCD_MOD        DATA 0xda
0000            110   _JCMD           DATA 0xc0
0000            111   _JBUF           DATA 0xc1
0000            112   _JCNT           DATA 0xc2
0000            113   _REP_ADD_L      DATA 0xf1
0000            114   _REP_ADD_H      DATA 0xf2
0000            115   _REP_VALUE      DATA 0xf3
0000            116   _DEBUG_CALL_L   DATA 0xfa
0000            117   _DEBUG_CALL_H   DATA 0xfb
0000            118   _BPC            DATA 0xfc
0000            119   _BPS            DATA 0xfd
0000            120   _BPAL           DATA 0xfe
0000            121   _BPAH           DATA 0xff
0000            122   _LBPAL          DATA 0xfa
0000            123   _LBPAH          DATA 0xfb
0000            124   _XRAMUSEDAS     DATA 0xc3
0000            125   _FLASH_CMD      DATA 0xdb
0000            126   _FLASH_DATA     DATA 0xdc
0000            127   _FLASH_MOD      DATA 0xdd
0000            128   _FLASH_ADD0     DATA 0xe1
0000            129   _FLASH_ADD1     DATA 0xe2
0000            130   _FLASH_ADD2     DATA 0xe3
0000            131   ;--------------------------------------------------------
0000            132   ; special function bits
0000            133   ;--------------------------------------------------------
0000            134   _P0_0           BIT 0x80
0000            135   _P0_1           BIT 0x81
0000            136   _P0_2           BIT 0x82
0000            137   _P0_3           BIT 0x83
0000            138   _P0_4           BIT 0x84
0000            139   _P0_5           BIT 0x85
0000            140   _P0_6           BIT 0x86
0000            141   _P0_7           BIT 0x87
0000            142   _IT0            BIT 0x88
0000            143   _IE0            BIT 0x89
0000            144   _IT1            BIT 0x8a
0000            145   _IE1            BIT 0x8b
0000            146   _TR0            BIT 0x8c
0000            147   _TF0            BIT 0x8d
0000            148   _TR1            BIT 0x8e
0000            149   _TF1            BIT 0x8f
0000            150   _P1_0           BIT 0x90
0000            151   _P1_1           BIT 0x91
0000            152   _P1_2           BIT 0x92
0000            153   _P1_3           BIT 0x93
0000            154   _P1_4           BIT 0x94
0000            155   _P1_5           BIT 0x95
0000            156   _P1_6           BIT 0x96
0000            157   _P1_7           BIT 0x97
0000            158   _RI             BIT 0x98
0000            159   _TI             BIT 0x99
0000            160   _RB8            BIT 0x9a
0000            161   _TB8            BIT 0x9b
0000            162   _REN            BIT 0x9c
0000            163   _SM2            BIT 0x9d
0000            164   _SM1            BIT 0x9e
0000            165   _SM0            BIT 0x9f
0000            166   _P2_0           BIT 0xa0
0000            167   _P2_1           BIT 0xa1
0000            168   _P2_2           BIT 0xa2
0000            169   _P2_3           BIT 0xa3
0000            170   _P2_4           BIT 0xa4
0000            171   _P2_5           BIT 0xa5
0000            172   _P2_6           BIT 0xa6
0000            173   _P2_7           BIT 0xa7
0000            174   _EX0            BIT 0xa8
0000            175   _ET0            BIT 0xa9
0000            176   _EX1            BIT 0xaa
0000            177   _ET1            BIT 0xab
0000            178   _ES             BIT 0xac
0000            179   _ET2            BIT 0xad
0000            180   _EA             BIT 0xaf
0000            181   _P3_0           BIT 0xb0
0000            182   _P3_1           BIT 0xb1
0000            183   _P3_2           BIT 0xb2
0000            184   _P3_3           BIT 0xb3
0000            185   _P3_4           BIT 0xb4
0000            186   _P3_5           BIT 0xb5
0000            187   _P3_6           BIT 0xb6
0000            188   _P3_7           BIT 0xb7
0000            189   _RXD            BIT 0xb0
0000            190   _TXD            BIT 0xb1
0000            191   _INT0           BIT 0xb2
0000            192   _INT1           BIT 0xb3
0000            193   _T0             BIT 0xb4
0000            194   _T1             BIT 0xb5
0000            195   _WR             BIT 0xb6
0000            196   _RD             BIT 0xb7
0000            197   _PX0            BIT 0xb8
0000            198   _PT0            BIT 0xb9
0000            199   _PX1            BIT 0xba
0000            200   _PT1            BIT 0xbb
0000            201   _PS             BIT 0xbc
0000            202   _PT2            BIT 0xbd
0000            203   _P              BIT 0xd0
0000            204   _F1             BIT 0xd1
0000            205   _OV             BIT 0xd2
0000            206   _RS0            BIT 0xd3
0000            207   _RS1            BIT 0xd4
0000            208   _F0             BIT 0xd5
0000            209   _AC             BIT 0xd6
0000            210   _CY             BIT 0xd7
0000            211   _T2CON_0        BIT 0xc8
0000            212   _T2CON_1        BIT 0xc9
0000            213   _T2CON_2        BIT 0xca
0000            214   _T2CON_3        BIT 0xcb
0000            215   _T2CON_4        BIT 0xcc
0000            216   _T2CON_5        BIT 0xcd
0000            217   _T2CON_6        BIT 0xce
0000            218   _T2CON_7        BIT 0xcf
0000            219   _CP_RL2         BIT 0xc8
0000            220   _C_T2           BIT 0xc9
0000            221   _TR2            BIT 0xca
0000            222   _EXEN2          BIT 0xcb
0000            223   _TCLK           BIT 0xcc
0000            224   _RCLK           BIT 0xcd
0000            225   _EXF2           BIT 0xce
0000            226   _TF2            BIT 0xcf
0000            227   _LEDRA_0        BIT 0xe8
0000            228   _LEDRA_1        BIT 0xe9
0000            229   _LEDRA_2        BIT 0xea
0000            230   _LEDRA_3        BIT 0xeb
0000            231   _LEDRA_4        BIT 0xec
0000            232   _LEDRA_5        BIT 0xed
0000            233   _LEDRA_6        BIT 0xee
0000            234   _LEDRA_7        BIT 0xef
0000            235   _SWA_0          BIT 0xe8
0000            236   _SWA_1          BIT 0xe9
0000            237   _SWA_2          BIT 0xea
0000            238   _SWA_3          BIT 0xeb
0000            239   _SWA_4          BIT 0xec
0000            240   _SWA_5          BIT 0xed
0000            241   _SWA_6          BIT 0xee
0000            242   _SWA_7          BIT 0xef
0000            243   _KEY_0          BIT 0xf8
0000            244   _KEY_1          BIT 0xf9
0000            245   _KEY_2          BIT 0xfa
0000            246   _KEY_3          BIT 0xfb
0000            247   _LCD_RW         BIT 0xd8
0000            248   _LCD_EN         BIT 0xd9
0000            249   _LCD_RS         BIT 0xda
0000            250   _LCD_ON         BIT 0xdb
0000            251   _LCD_BLON       BIT 0xdc
0000            252   _JRXRDY         BIT 0xc0
0000            253   _JTXRDY         BIT 0xc1
0000            254   _JRXEN          BIT 0xc2
0000            255   _JTXEN          BIT 0xc3
0000            256   _JTXFULL        BIT 0xc4
0000            257   _JRXFULL        BIT 0xc5
0000            258   _JTXEMPTY       BIT 0xc6
0000            259   _JTDI           BIT 0xc7
0000            260   _MY_MOSI        BIT 0xdf
0000            261   _MY_MISO        BIT 0xdf
0000            262   _MY_SCLK        BIT 0xde
0000            263   _MY_CE          BIT 0xdd
0000            264   _ASMI_ACC_GRANTED BIT 0xdc
0000            265   _ASMI_ACC_REQUEST BIT 0xde
0000            266   ;--------------------------------------------------------
0000            267   ; overlayable register banks
0000            268   ;--------------------------------------------------------
0000            269            rbank0 segment data overlay
0000            270   ;--------------------------------------------------------
0000            271   ; internal ram data
0000            272   ;--------------------------------------------------------
0000            273            rseg R_DSEG
0000            274   _getbyte_j_1_83:
0000            275            ds 1
0001            276   _FlashByte_PARM_2:
0001            277            ds 1
0002            278   _FlashBuff_PARM_2:
0002            279            ds 3
0005            280   _FlashBuff_PARM_3:
0005            281            ds 1
0006            282   _loadintelhex_address_1_103:
0006            283            ds 2
0008            284   _loadintelhex_j_1_103:
0008            285            ds 1
0009            286   _loadintelhex_size_1_103:
0009            287            ds 1
000A            288   _loadintelhex_type_1_103:
000A            289            ds 1
000B            290   _loadintelhex_checksum_1_103:
000B            291            ds 1
000C            292   _loadintelhex_n_1_103:
000C            293            ds 1
000D            294   _loadintelhex_echo_1_103:
000D            295            ds 1
000E            296   ;--------------------------------------------------------
000E            297   ; overlayable items in internal ram 
000E            298   ;--------------------------------------------------------
0000            299            rseg    R_OSEG
0000            300            rseg    R_OSEG
0000            301            rseg    R_OSEG
0000            302            rseg    R_OSEG
0000            303   _Write_XRAM_PARM_2:
0000            304            ds 1
0001            305            rseg    R_OSEG
0001            306            rseg    R_OSEG
0001            307   _str2hex_sloc0_1_0:
0001            308            ds 2
0003            309   ;--------------------------------------------------------
0003            310   ; indirectly addressable internal ram data
0003            311   ;--------------------------------------------------------
0000            312            rseg R_ISEG
0000            313   _buff:
0000            314            ds 64
0040            315   ;--------------------------------------------------------
0040            316   ; absolute internal ram data
0040            317   ;--------------------------------------------------------
0000            318            DSEG
0000            319   ;--------------------------------------------------------
0000            320   ; bit data
0000            321   ;--------------------------------------------------------
0000            322            rseg R_BSEG
0000            323   _getchar_echo:
0000            324            DBIT    1
0001            325   ;--------------------------------------------------------
0001            326   ; paged external ram data
0001            327   ;--------------------------------------------------------
0000            328            rseg R_PSEG
0000            329   ;--------------------------------------------------------
0000            330   ; external ram data
0000            331   ;--------------------------------------------------------
0000            332            rseg R_XSEG
0000            333   ;--------------------------------------------------------
0000            334   ; absolute external ram data
0000            335   ;--------------------------------------------------------
0000            336            XSEG
0000            337   ;--------------------------------------------------------
0000            338   ; external initialized ram data
0000            339   ;--------------------------------------------------------
0000            340            rseg R_IXSEG
0000            341            rseg R_HOME
0000            342            rseg R_GSINIT
0000            343            rseg R_CSEG
0000            344   ;--------------------------------------------------------
0000            345   ; Reset entry point and interrupt vectors
0000            346   ;--------------------------------------------------------
F000            347            CSEG at 0xf000
F000 020100     348            ljmp    _crt0
F003            349   ;--------------------------------------------------------
F003            350   ; global & static initialisations
F003            351   ;--------------------------------------------------------
0000            352            rseg R_HOME
0000            353            rseg R_GSINIT
0000            354            rseg R_GSINIT
0000            355   ;--------------------------------------------------------
0000            356   ; data variables initialization
0000            357   ;--------------------------------------------------------
0000            358            rseg R_DINIT
0000            359   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:44: bit getchar_echo=0;
0000 C240       360            clr     _getchar_echo
0002            361            ; The linker places a 'ret' at the end of segment R_DINIT.
0002            362   ;--------------------------------------------------------
0002            363   ; code
0002            364   ;--------------------------------------------------------
0000            365            rseg R_CSEG
0000            366   ;------------------------------------------------------------
0000            367   ;Allocation info for local variables in function 'de2_8052_crt0'
0000            368   ;------------------------------------------------------------
0000            369   ;------------------------------------------------------------
0000            370   ;        C:/Source/call51/Bin/../include/mcs51/CV_8052.h:303: void de2_8052_crt0 (void) _naked
0000            371   ;        -----------------------------------------
0000            372   ;         function de2_8052_crt0
0000            373   ;        -----------------------------------------
0000            374   _de2_8052_crt0:
0000            375   ;        naked function: no prologue.
0000            376   ;        C:/Source/call51/Bin/../include/mcs51/CV_8052.h:372: _endasm;
0000            377            
0000            378            
0000            379             rseg R_GSINIT
0000            380             public _crt0
0000            381            _crt0:
0000 7581FF     382             mov sp,#_stack_start-1
0003 120100     383             lcall __c51_external_startup
0006 E582       384             mov a,dpl
0008 6001       385             jz __c51_init_data
000A 020100     386             ljmp __c51_program_startup
000D            387            __c51_init_data:
000D            388            
000D            389   ; Initialize xdata variables
000D            390            
000D 758200     391             mov dpl, #_R_XINIT_start
0010 758300     392             mov dph, #(_R_XINIT_start>>8)
0013 758400     393             mov _DPL1, #_R_IXSEG_start
0016 758500     394             mov _DPH1, #(_R_IXSEG_start>>8)
0019 7800       395             mov r0, #_R_IXSEG_size
001B 7900       396             mov r1, #(_R_IXSEG_size>>8)
001D            397            
001D            398            XInitLoop?repeat?:
001D E8         399             mov a, r0
001E 49         400             orl a, r1
001F 6001       401             jz XInitLoop?done?
0021 E4         402             clr a
0022 758600     403             mov _DPS, #0 ; Using dpl, dph
0025 93         404             movc a,@a+dptr
0026 A3         405             inc dptr
0027 758601     406             mov _DPS, #1 ; Using DPL1, DPH1
002A F0         407             movx @dptr, a
002B A3         408             inc dptr
002C 18         409             dec r0
002D B8FFF8     410             cjne r0, #0xff, XInitLoop?repeat?
0030 19         411             dec r1
0031 8001       412             sjmp XInitLoop?repeat?
0033            413            
0033            414            XInitLoop?done?:
0033            415            
0033            416   ; Clear xdata variables
0033 758600     417             mov _DPS, #0 ; Make sure we are using dpl, dph
0036 758200     418             mov dpl, #_R_XSEG_start
0039 758300     419             mov dph, #(_R_XSEG_start>>8)
003C 7C00       420             mov r4, #_R_XSEG_size
003E 7D00       421             mov r5, #(_R_XSEG_size>>8)
0040            422            
0040            423            XClearLoop?repeat?:
0040 EC         424             mov a, r4
0041 4D         425             orl a, r5
0042 6001       426             jz XClearLoop?done?
0044 E4         427             clr a
0045 F0         428             movx @dptr, a
0046 A3         429             inc dptr
0047 1C         430             dec r4
0048 BCFF08     431             cjne r4, #0xff, XClearLoop?repeat?
004B 1D         432             dec r5
004C 8001       433             sjmp XClearLoop?repeat?
004E            434            
004E            435            XClearLoop?done?:
004E 120100     436             lcall _R_DINIT_start ; Initialize data/idata variables
0051            437            
0051            438            __c51_program_startup:
0051 120100     439             lcall _main
0054            440            
0054            441            forever?home?:
0054 8001       442             sjmp forever?home?
0056            443            
0056            444             
0056            445   ;        naked function: no epilogue.
0056            446   ;------------------------------------------------------------
0056            447   ;Allocation info for local variables in function 'DoSPI'
0056            448   ;------------------------------------------------------------
0056            449   ;value                     Allocated to registers 
0056            450   ;------------------------------------------------------------
0056            451   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:68: unsigned char DoSPI (unsigned char value)
0056            452   ;        -----------------------------------------
0056            453   ;         function DoSPI
0056            454   ;        -----------------------------------------
0056            455   _DoSPI:
0056            456            using   0
0056            457   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:96: _endasm;
0056            458            
0056 E582       459              mov a, dpl
0058 C2DE       460              clr _MY_SCLK
005A            461            
                462   	  SPIBIT MAC
                463         ; Send/Receive bit %0
                464   	   rlc a
                465   	   mov _MY_MOSI, c
                466   	   setb _MY_SCLK
                467   	   mov c, _MY_MISO
                468   	   clr _MY_SCLK
                469   	   mov acc.0, c
                470   	  ENDMAC
005A            471            
005A            472         ; Send/Receive bit 7
005A 33         472               rlc a
005B 92DF       472               mov _MY_MOSI, c
005D D2DE       472               setb _MY_SCLK
005F A2DF       472               mov c, _MY_MISO
0061 C2DE       472               clr _MY_SCLK
0063 92E0       472               mov acc.0, c
0065            473         ; Send/Receive bit 6
0065 33         473               rlc a
0066 92DF       473               mov _MY_MOSI, c
0068 D2DE       473               setb _MY_SCLK
006A A2DF       473               mov c, _MY_MISO
006C C2DE       473               clr _MY_SCLK
006E 92E0       473               mov acc.0, c
0070            474         ; Send/Receive bit 5
0070 33         474               rlc a
0071 92DF       474               mov _MY_MOSI, c
0073 D2DE       474               setb _MY_SCLK
0075 A2DF       474               mov c, _MY_MISO
0077 C2DE       474               clr _MY_SCLK
0079 92E0       474               mov acc.0, c
007B            475         ; Send/Receive bit 4
007B 33         475               rlc a
007C 92DF       475               mov _MY_MOSI, c
007E D2DE       475               setb _MY_SCLK
0080 A2DF       475               mov c, _MY_MISO
0082 C2DE       475               clr _MY_SCLK
0084 92E0       475               mov acc.0, c
0086            476         ; Send/Receive bit 3
0086 33         476               rlc a
0087 92DF       476               mov _MY_MOSI, c
0089 D2DE       476               setb _MY_SCLK
008B A2DF       476               mov c, _MY_MISO
008D C2DE       476               clr _MY_SCLK
008F 92E0       476               mov acc.0, c
0091            477         ; Send/Receive bit 2
0091 33         477               rlc a
0092 92DF       477               mov _MY_MOSI, c
0094 D2DE       477               setb _MY_SCLK
0096 A2DF       477               mov c, _MY_MISO
0098 C2DE       477               clr _MY_SCLK
009A 92E0       477               mov acc.0, c
009C            478         ; Send/Receive bit 1
009C 33         478               rlc a
009D 92DF       478               mov _MY_MOSI, c
009F D2DE       478               setb _MY_SCLK
00A1 A2DF       478               mov c, _MY_MISO
00A3 C2DE       478               clr _MY_SCLK
00A5 92E0       478               mov acc.0, c
00A7            479         ; Send/Receive bit 0
00A7 33         479               rlc a
00A8 92DF       479               mov _MY_MOSI, c
00AA D2DE       479               setb _MY_SCLK
00AC A2DF       479               mov c, _MY_MISO
00AE C2DE       479               clr _MY_SCLK
00B0 92E0       479               mov acc.0, c
00B2            480            
00B2 F582       481              mov dpl, a
00B4 22         482              ret
00B5            483             
00B5            484   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:98: return 0;
00B5 758200     485            mov     dpl,#0x00
00B8 22         486            ret
00B9            487   ;------------------------------------------------------------
00B9            488   ;Allocation info for local variables in function 'Check_WIP'
00B9            489   ;------------------------------------------------------------
00B9            490   ;status                    Allocated to registers 
00B9            491   ;------------------------------------------------------------
00B9            492   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:101: void Check_WIP (void)
00B9            493   ;        -----------------------------------------
00B9            494   ;         function Check_WIP
00B9            495   ;        -----------------------------------------
00B9            496   _Check_WIP:
00B9            497   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:105: MY_CE=0;
00B9 C2DD       498            clr     _MY_CE
00BB            499   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:106: DoSPI(READ_STATUS);
00BB 758205     500            mov     dpl,#0x05
00BE 120100     501            lcall   _DoSPI
00C1            502   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:107: do {
00C1            503   L004001?:
00C1            504   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:108: status=DoSPI(0x55);
00C1 758255     505            mov     dpl,#0x55
00C4 120100     506            lcall   _DoSPI
00C7 E582       507            mov     a,dpl
00C9            508   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:109: } while (status&0b0000_0001); // Check the Write in Progress bit
00C9 20E0F0     509            jb      acc.0,L004001?
00CC            510   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:110: MY_CE=1;
00CC D2DD       511            setb    _MY_CE
00CE 22         512            ret
00CF            513   ;------------------------------------------------------------
00CF            514   ;Allocation info for local variables in function 'inituart'
00CF            515   ;------------------------------------------------------------
00CF            516   ;------------------------------------------------------------
00CF            517   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:113: void inituart (void)
00CF            518   ;        -----------------------------------------
00CF            519   ;         function inituart
00CF            520   ;        -----------------------------------------
00CF            521   _inituart:
00CF            522   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:115: RCAP2H=HIGH(TIMER_2_RELOAD);
00CF 75CBFF     523            mov     _RCAP2H,#0xFF
00D2            524   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:116: RCAP2L=LOW(TIMER_2_RELOAD);
00D2 75CAF7     525            mov     _RCAP2L,#0xF7
00D5            526   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:117: T2CON=0x34; // #00110100B
00D5 75C834     527            mov     _T2CON,#0x34
00D8            528   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:118: SCON=0x52; // Serial port in mode 1, ren, txrdy, rxempty
00D8 759852     529            mov     _SCON,#0x52
00DB 22         530            ret
00DC            531   ;------------------------------------------------------------
00DC            532   ;Allocation info for local variables in function 'putchar'
00DC            533   ;------------------------------------------------------------
00DC            534   ;c                         Allocated to registers r2 
00DC            535   ;------------------------------------------------------------
00DC            536   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:121: void putchar (char c)
00DC            537   ;        -----------------------------------------
00DC            538   ;         function putchar
00DC            539   ;        -----------------------------------------
00DC            540   _putchar:
00DC AA82       541            mov     r2,dpl
00DE            542   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:123: if (c=='\n')
00DE BA0A30     543            cjne    r2,#0x0A,L006006?
00E1            544   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:125: while (!TI);
00E1            545   L006001?:
00E1            546   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:126: TI=0;
00E1 1099F0     547            jbc     _TI,L006017?
00E4 8001       548            sjmp    L006001?
00E6            549   L006017?:
00E6            550   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:127: SBUF='\r';
00E6 75990D     551            mov     _SBUF,#0x0D
00E9            552   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:129: while (!TI);
00E9            553   L006006?:
00E9            554   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:130: TI=0;
00E9 109930     555            jbc     _TI,L006018?
00EC 8001       556            sjmp    L006006?
00EE            557   L006018?:
00EE            558   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:131: SBUF=c;
00EE 8A99       559            mov     _SBUF,r2
00F0 22         560            ret
00F1            561   ;------------------------------------------------------------
00F1            562   ;Allocation info for local variables in function 'getchar'
00F1            563   ;------------------------------------------------------------
00F1            564   ;c                         Allocated to registers r2 
00F1            565   ;------------------------------------------------------------
00F1            566   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:134: char getchar (void)
00F1            567   ;        -----------------------------------------
00F1            568   ;         function getchar
00F1            569   ;        -----------------------------------------
00F1            570   _getchar:
00F1            571   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:138: while (!RI);
00F1            572   L007001?:
00F1            573   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:139: RI=0;
00F1 1098B0     574            jbc     _RI,L007011?
00F4 8001       575            sjmp    L007001?
00F6            576   L007011?:
00F6            577   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:140: c=SBUF;
00F6 AA99       578            mov     r2,_SBUF
00F8            579   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:141: if (getchar_echo==1) putchar(c);
00F8 3040F0     580            jnb     _getchar_echo,L007005?
00FB 8A82       581            mov     dpl,r2
00FD C002       582            push    ar2
00FF 120100     583            lcall   _putchar
0102 D002       584            pop     ar2
0104            585   L007005?:
0104            586   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:143: return c;
0104 8A82       587            mov     dpl,r2
0106 22         588            ret
0107            589   ;------------------------------------------------------------
0107            590   ;Allocation info for local variables in function 'getchare'
0107            591   ;------------------------------------------------------------
0107            592   ;c                         Allocated to registers r2 
0107            593   ;------------------------------------------------------------
0107            594   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:146: char getchare (void)
0107            595   ;        -----------------------------------------
0107            596   ;         function getchare
0107            597   ;        -----------------------------------------
0107            598   _getchare:
0107            599   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:150: c=getchar();
0107 120100     600            lcall   _getchar
010A            601   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:151: putchar(c);
010A AA82       602            mov  r2,dpl
010C C002       603            push    ar2
010E 120100     604            lcall   _putchar
0111 D002       605            pop     ar2
0113            606   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:152: return c;
0113 8A82       607            mov     dpl,r2
0115 22         608            ret
0116            609   ;------------------------------------------------------------
0116            610   ;Allocation info for local variables in function 'sends'
0116            611   ;------------------------------------------------------------
0116            612   ;c                         Allocated to registers r2 r3 r4 
0116            613   ;n                         Allocated to registers r6 
0116            614   ;------------------------------------------------------------
0116            615   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:155: void sends (unsigned char * c)
0116            616   ;        -----------------------------------------
0116            617   ;         function sends
0116            618   ;        -----------------------------------------
0116            619   _sends:
0116 AA82       620            mov     r2,dpl
0118 AB83       621            mov     r3,dph
011A ACF0       622            mov     r4,b
011C            623   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:158: while(n=*c)
011C            624   L009001?:
011C 8A82       625            mov     dpl,r2
011E 8B83       626            mov     dph,r3
0120 8CF0       627            mov     b,r4
0122 120100     628            lcall   __gptrget
0125 FD         629            mov     r5,a
0126 FE         630            mov     r6,a
0127 6001       631            jz      L009004?
0129            632   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:160: putchar(n);
0129 8E82       633            mov     dpl,r6
012B C002       634            push    ar2
012D C003       635            push    ar3
012F C004       636            push    ar4
0131 120100     637            lcall   _putchar
0134 D004       638            pop     ar4
0136 D003       639            pop     ar3
0138 D002       640            pop     ar2
013A            641   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:161: c++;
013A 0A         642            inc     r2
013B BA0070     643            cjne    r2,#0x00,L009001?
013E 0B         644            inc     r3
013F 8001       645            sjmp    L009001?
0141            646   L009004?:
0141 22         647            ret
0142            648   ;------------------------------------------------------------
0142            649   ;Allocation info for local variables in function 'chartohex'
0142            650   ;------------------------------------------------------------
0142            651   ;c                         Allocated to registers r2 
0142            652   ;------------------------------------------------------------
0142            653   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:165: unsigned char chartohex(char c)
0142            654   ;        -----------------------------------------
0142            655   ;         function chartohex
0142            656   ;        -----------------------------------------
0142            657   _chartohex:
0142            658   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:167: if(c & 0x40) c+=9; //  a to f or A to F
0142 E582       659            mov     a,dpl
0144 FA         660            mov     r2,a
0145 30E630     661            jnb     acc.6,L010002?
0148 7409       662            mov     a,#0x09
014A 2A         663            add     a,r2
014B FA         664            mov     r2,a
014C            665   L010002?:
014C            666   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:168: return (c & 0xf);
014C 740F       667            mov     a,#0x0F
014E 5A         668            anl     a,r2
014F F582       669            mov     dpl,a
0151 22         670            ret
0152            671   ;------------------------------------------------------------
0152            672   ;Allocation info for local variables in function 'getbyte'
0152            673   ;------------------------------------------------------------
0152            674   ;j                         Allocated with name '_getbyte_j_1_83'
0152            675   ;------------------------------------------------------------
0152            676   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:172: unsigned char getbyte (void)
0152            677   ;        -----------------------------------------
0152            678   ;         function getbyte
0152            679   ;        -----------------------------------------
0152            680   _getbyte:
0152            681   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:176: j=chartohex(getchare())*0x10;
0152 120100     682            lcall   _getchare
0155 120100     683            lcall   _chartohex
0158 E582       684            mov     a,dpl
015A C4         685            swap    a
015B 54F0       686            anl     a,#0xf0
015D F548       687            mov     _getbyte_j_1_83,a
015F            688   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:177: j|=chartohex(getchare());
015F 120100     689            lcall   _getchare
0162 120100     690            lcall   _chartohex
0165 E582       691            mov     a,dpl
0167 4248       692            orl     _getbyte_j_1_83,a
0169            693   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:179: return j;
0169 854882     694            mov     dpl,_getbyte_j_1_83
016C 22         695            ret
016D            696   ;------------------------------------------------------------
016D            697   ;Allocation info for local variables in function 'In_Byte_Flash'
016D            698   ;------------------------------------------------------------
016D            699   ;address                   Allocated to registers r2 r3 
016D            700   ;j                         Allocated to registers 
016D            701   ;------------------------------------------------------------
016D            702   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:182: unsigned char In_Byte_Flash (unsigned int address)
016D            703   ;        -----------------------------------------
016D            704   ;         function In_Byte_Flash
016D            705   ;        -----------------------------------------
016D            706   _In_Byte_Flash:
016D AA82       707            mov     r2,dpl
016F AB83       708            mov     r3,dph
0171            709   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:186: MY_CE=0;
0171 C2DD       710            clr     _MY_CE
0173            711   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:187: DoSPI(READ_BYTES);
0173 758203     712            mov     dpl,#0x03
0176 C002       713            push    ar2
0178 C003       714            push    ar3
017A 120100     715            lcall   _DoSPI
017D            716   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:188: DoSPI(FLASHSECTOR);
017D 7582F8     717            mov     dpl,#0xF8
0180 120100     718            lcall   _DoSPI
0183 D003       719            pop     ar3
0185            720   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:189: DoSPI(address/0x100);
0185 8B04       721            mov     ar4,r3
0187 8C82       722            mov     dpl,r4
0189 C003       723            push    ar3
018B 120100     724            lcall   _DoSPI
018E D003       725            pop     ar3
0190 D002       726            pop     ar2
0192            727   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:190: DoSPI(address%0x100);
0192 8A82       728            mov     dpl,r2
0194 120100     729            lcall   _DoSPI
0197            730   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:191: j=DoSPI(0x55);
0197 758255     731            mov     dpl,#0x55
019A 120100     732            lcall   _DoSPI
019D            733   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:192: MY_CE=1;
019D D2DD       734            setb    _MY_CE
019F            735   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:194: return j;
019F 22         736            ret
01A0            737   ;------------------------------------------------------------
01A0            738   ;Allocation info for local variables in function 'EraseSector'
01A0            739   ;------------------------------------------------------------
01A0            740   ;------------------------------------------------------------
01A0            741   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:197: void EraseSector (void)
01A0            742   ;        -----------------------------------------
01A0            743   ;         function EraseSector
01A0            744   ;        -----------------------------------------
01A0            745   _EraseSector:
01A0            746   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:199: MY_CE=0; DoSPI(WRITE_ENABLE); MY_CE=1;
01A0 C2DD       747            clr     _MY_CE
01A2 758206     748            mov     dpl,#0x06
01A5 120100     749            lcall   _DoSPI
01A8 D2DD       750            setb    _MY_CE
01AA            751   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:201: MY_CE=0;
01AA C2DD       752            clr     _MY_CE
01AC            753   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:202: DoSPI(ERASE_SECTOR);
01AC 7582D8     754            mov     dpl,#0xD8
01AF 120100     755            lcall   _DoSPI
01B2            756   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:203: DoSPI(FLASHSECTOR);
01B2 7582F8     757            mov     dpl,#0xF8
01B5 120100     758            lcall   _DoSPI
01B8            759   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:204: DoSPI(0x00);
01B8 758200     760            mov     dpl,#0x00
01BB 120100     761            lcall   _DoSPI
01BE            762   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:205: DoSPI(0x00);
01BE 758200     763            mov     dpl,#0x00
01C1 120100     764            lcall   _DoSPI
01C4            765   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:206: MY_CE=1;
01C4 D2DD       766            setb    _MY_CE
01C6            767   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:208: Check_WIP();
01C6 020100     768            ljmp    _Check_WIP
01C9            769   ;------------------------------------------------------------
01C9            770   ;Allocation info for local variables in function 'Write_XRAM'
01C9            771   ;------------------------------------------------------------
01C9            772   ;Value                     Allocated with name '_Write_XRAM_PARM_2'
01C9            773   ;Address                   Allocated to registers r2 r3 
01C9            774   ;------------------------------------------------------------
01C9            775   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:211: void Write_XRAM (unsigned int Address, unsigned char Value)
01C9            776   ;        -----------------------------------------
01C9            777   ;         function Write_XRAM
01C9            778   ;        -----------------------------------------
01C9            779   _Write_XRAM:
01C9            780   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:213: *((unsigned char xdata *) Address)=Value;
01C9 E550       781            mov     a,_Write_XRAM_PARM_2
01CB F0         782            movx    @dptr,a
01CC 22         783            ret
01CD            784   ;------------------------------------------------------------
01CD            785   ;Allocation info for local variables in function 'Read_XRAM'
01CD            786   ;------------------------------------------------------------
01CD            787   ;Address                   Allocated to registers r2 r3 
01CD            788   ;------------------------------------------------------------
01CD            789   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:216: unsigned char Read_XRAM (unsigned int Address)
01CD            790   ;        -----------------------------------------
01CD            791   ;         function Read_XRAM
01CD            792   ;        -----------------------------------------
01CD            793   _Read_XRAM:
01CD            794   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:218: return *((unsigned char xdata *) Address);
01CD E0         795            movx    a,@dptr
01CE F582       796            mov     dpl,a
01D0 22         797            ret
01D1            798   ;------------------------------------------------------------
01D1            799   ;Allocation info for local variables in function 'FlashByte'
01D1            800   ;------------------------------------------------------------
01D1            801   ;val                       Allocated with name '_FlashByte_PARM_2'
01D1            802   ;address                   Allocated to registers r2 r3 
01D1            803   ;------------------------------------------------------------
01D1            804   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:221: void FlashByte (unsigned int address, unsigned char val)
01D1            805   ;        -----------------------------------------
01D1            806   ;         function FlashByte
01D1            807   ;        -----------------------------------------
01D1            808   _FlashByte:
01D1 AA82       809            mov     r2,dpl
01D3 AB83       810            mov     r3,dph
01D5            811   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:223: MY_CE=0; DoSPI(WRITE_ENABLE);  MY_CE=1;
01D5 C2DD       812            clr     _MY_CE
01D7 758206     813            mov     dpl,#0x06
01DA C002       814            push    ar2
01DC C003       815            push    ar3
01DE 120100     816            lcall   _DoSPI
01E1 D2DD       817            setb    _MY_CE
01E3            818   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:225: MY_CE=0;
01E3 C2DD       819            clr     _MY_CE
01E5            820   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:226: DoSPI(WRITE_BYTES);
01E5 758202     821            mov     dpl,#0x02
01E8 120100     822            lcall   _DoSPI
01EB            823   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:227: DoSPI(FLASHSECTOR);
01EB 7582F8     824            mov     dpl,#0xF8
01EE 120100     825            lcall   _DoSPI
01F1 D003       826            pop     ar3
01F3            827   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:228: DoSPI(address/0x100);
01F3 8B04       828            mov     ar4,r3
01F5 8C82       829            mov     dpl,r4
01F7 C003       830            push    ar3
01F9 120100     831            lcall   _DoSPI
01FC D003       832            pop     ar3
01FE D002       833            pop     ar2
0200            834   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:229: DoSPI(address%0x100);
0200 8A82       835            mov     dpl,r2
0202 120100     836            lcall   _DoSPI
0205            837   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:230: DoSPI(val);
0205 857082     838            mov     dpl,_FlashByte_PARM_2
0208 120100     839            lcall   _DoSPI
020B            840   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:231: MY_CE=1;
020B D2DD       841            setb    _MY_CE
020D            842   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:233: Check_WIP();
020D 020100     843            ljmp    _Check_WIP
0210            844   ;------------------------------------------------------------
0210            845   ;Allocation info for local variables in function 'FlashBuff'
0210            846   ;------------------------------------------------------------
0210            847   ;buff                      Allocated with name '_FlashBuff_PARM_2'
0210            848   ;numb                      Allocated with name '_FlashBuff_PARM_3'
0210            849   ;address                   Allocated to registers r2 r3 
0210            850   ;j                         Allocated to registers r2 
0210            851   ;------------------------------------------------------------
0210            852   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:237: void FlashBuff (unsigned int address, unsigned char * buff, unsigned char numb)
0210            853   ;        -----------------------------------------
0210            854   ;         function FlashBuff
0210            855   ;        -----------------------------------------
0210            856   _FlashBuff:
0210 AA82       857            mov     r2,dpl
0212 AB83       858            mov     r3,dph
0214            859   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:241: MY_CE=0; DoSPI(WRITE_ENABLE);  MY_CE=1;
0214 C2DD       860            clr     _MY_CE
0216 758206     861            mov     dpl,#0x06
0219 C002       862            push    ar2
021B C003       863            push    ar3
021D 120100     864            lcall   _DoSPI
0220 D2DD       865            setb    _MY_CE
0222            866   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:242: MY_CE=0;
0222 C2DD       867            clr     _MY_CE
0224            868   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:243: DoSPI(WRITE_BYTES);
0224 758202     869            mov     dpl,#0x02
0227 120100     870            lcall   _DoSPI
022A            871   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:244: DoSPI(FLASHSECTOR);
022A 7582F8     872            mov     dpl,#0xF8
022D 120100     873            lcall   _DoSPI
0230 D003       874            pop     ar3
0232            875   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:245: DoSPI(address/0x100);
0232 8B04       876            mov     ar4,r3
0234 8C82       877            mov     dpl,r4
0236 C003       878            push    ar3
0238 120100     879            lcall   _DoSPI
023B D003       880            pop     ar3
023D D002       881            pop     ar2
023F            882   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:246: DoSPI(address%0x100);
023F 8A82       883            mov     dpl,r2
0241 120100     884            lcall   _DoSPI
0244            885   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:247: for(j=0; j<numb; j++) DoSPI(buff[j]);
0244 7A00       886            mov     r2,#0x00
0246            887   L017001?:
0246 C3         888            clr     c
0247 EA         889            mov     a,r2
0248 95D0       890            subb    a,_FlashBuff_PARM_3
024A 5001       891            jnc     L017004?
024C EA         892            mov     a,r2
024D 2520       893            add     a,_FlashBuff_PARM_2
024F FB         894            mov     r3,a
0250 E4         895            clr     a
0251 3521       896            addc    a,(_FlashBuff_PARM_2 + 1)
0253 FC         897            mov     r4,a
0254 AD22       898            mov     r5,(_FlashBuff_PARM_2 + 2)
0256 8B82       899            mov     dpl,r3
0258 8C83       900            mov     dph,r4
025A 8DF0       901            mov     b,r5
025C 120100     902            lcall   __gptrget
025F F582       903            mov     dpl,a
0261 C002       904            push    ar2
0263 120100     905            lcall   _DoSPI
0266 D002       906            pop     ar2
0268 0A         907            inc     r2
0269 8001       908            sjmp    L017001?
026B            909   L017004?:
026B            910   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:248: MY_CE=1;
026B D2DD       911            setb    _MY_CE
026D            912   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:250: Check_WIP();
026D 020100     913            ljmp    _Check_WIP
0270            914   ;------------------------------------------------------------
0270            915   ;Allocation info for local variables in function 'Copy_Flash_to_RAM'
0270            916   ;------------------------------------------------------------
0270            917   ;------------------------------------------------------------
0270            918   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:253: void Copy_Flash_to_RAM (void)
0270            919   ;        -----------------------------------------
0270            920   ;         function Copy_Flash_to_RAM
0270            921   ;        -----------------------------------------
0270            922   _Copy_Flash_to_RAM:
0270            923   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:255: XRAMUSEDAS=0x01; // 32k RAM accessed as xdata
0270 75C301     924            mov     _XRAMUSEDAS,#0x01
0273            925   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:257: MY_CE=0;
0273 C2DD       926            clr     _MY_CE
0275            927   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:258: DoSPI(READ_BYTES);
0275 758203     928            mov     dpl,#0x03
0278 120100     929            lcall   _DoSPI
027B            930   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:259: DoSPI(FLASHSECTOR);
027B 7582F8     931            mov     dpl,#0xF8
027E 120100     932            lcall   _DoSPI
0281            933   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:260: DoSPI(0);
0281 758200     934            mov     dpl,#0x00
0284 120100     935            lcall   _DoSPI
0287            936   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:261: DoSPI(0);
0287 758200     937            mov     dpl,#0x00
028A 120100     938            lcall   _DoSPI
028D            939   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:313: _endasm;
028D            940            
028D 900000     941                 mov dptr, #0
0290            942             load_next_byte:
0290            943        ; Bit 7
0290 C2DE       944              clr _MY_SCLK
0292 A2DF       945              mov c, _MY_MISO
0294 D2DE       946              setb _MY_SCLK
0296 33         947              rlc a
0297            948        ; Bit 6
0297 C2DE       949              clr _MY_SCLK
0299 A2DF       950              mov c, _MY_MISO
029B D2DE       951              setb _MY_SCLK
029D 33         952              rlc a
029E            953        ; Bit 5
029E C2DE       954              clr _MY_SCLK
02A0 A2DF       955              mov c, _MY_MISO
02A2 D2DE       956              setb _MY_SCLK
02A4 33         957              rlc a
02A5            958        ; Bit 4
02A5 C2DE       959              clr _MY_SCLK
02A7 A2DF       960              mov c, _MY_MISO
02A9 D2DE       961              setb _MY_SCLK
02AB 33         962              rlc a
02AC            963        ; Bit 3
02AC C2DE       964              clr _MY_SCLK
02AE A2DF       965              mov c, _MY_MISO
02B0 D2DE       966              setb _MY_SCLK
02B2 33         967              rlc a
02B3            968        ; Bit 2
02B3 C2DE       969              clr _MY_SCLK
02B5 A2DF       970              mov c, _MY_MISO
02B7 D2DE       971              setb _MY_SCLK
02B9 33         972              rlc a
02BA            973        ; Bit 1
02BA C2DE       974              clr _MY_SCLK
02BC A2DF       975              mov c, _MY_MISO
02BE D2DE       976              setb _MY_SCLK
02C0 33         977              rlc a
02C1            978        ; Bit 0
02C1 C2DE       979              clr _MY_SCLK
02C3 A2DF       980              mov c, _MY_MISO
02C5 D2DE       981              setb _MY_SCLK
02C7 33         982              rlc a
02C8            983     ; Move to xram
02C8 F0         984              movx @dptr, a
02C9 A3         985              inc dptr
02CA            986     ; Check for number of bytes
02CA E583       987              mov a, dph
02CC 30E7F0     988              jnb acc.7, load_next_byte
02CF            989                
02CF            990   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:315: MY_CE=1;
02CF D2DD       991            setb    _MY_CE
02D1 22         992            ret
02D2            993   ;------------------------------------------------------------
02D2            994   ;Allocation info for local variables in function 'Load_Ram_Fast_and_Run'
02D2            995   ;------------------------------------------------------------
02D2            996   ;------------------------------------------------------------
02D2            997   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:318: void Load_Ram_Fast_and_Run (void)
02D2            998   ;        -----------------------------------------
02D2            999   ;         function Load_Ram_Fast_and_Run
02D2           1000   ;        -----------------------------------------
02D2           1001   _Load_Ram_Fast_and_Run:
02D2           1002   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:320: Copy_Flash_to_RAM();
02D2 120100    1003            lcall   _Copy_Flash_to_RAM
02D5           1004   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:321: ASMI_ACC_GRANTED=1;  // Release the SPI bus
02D5 D2DC      1005            setb    _ASMI_ACC_GRANTED
02D7           1006   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:322: T2CON=0;
02D7 75C800    1007            mov     _T2CON,#0x00
02DA           1008   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:323: SCON=0;
02DA 759800    1009            mov     _SCON,#0x00
02DD           1010   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:324: RCAP2H=0;
02DD 75CB00    1011            mov     _RCAP2H,#0x00
02E0           1012   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:325: RCAP2L=0;
02E0 75CA00    1013            mov     _RCAP2L,#0x00
02E3           1014   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:332: _endasm;
02E3           1015            
02E3 75C300    1016              mov _XRAMUSEDAS, #0 ; 32k RAM accessed as code
02E6           1017     ; RAM is loaded with user code. Run it.
02E6 758107    1018              mov sp, #7
02E9 020000    1019              ljmp 0x0000
02EC           1020             
02EC 22        1021            ret
02ED           1022   ;------------------------------------------------------------
02ED           1023   ;Allocation info for local variables in function 'Load_Ram_Fast_and_Run_Debugger'
02ED           1024   ;------------------------------------------------------------
02ED           1025   ;------------------------------------------------------------
02ED           1026   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:335: void Load_Ram_Fast_and_Run_Debugger (void)
02ED           1027   ;        -----------------------------------------
02ED           1028   ;         function Load_Ram_Fast_and_Run_Debugger
02ED           1029   ;        -----------------------------------------
02ED           1030   _Load_Ram_Fast_and_Run_Debugger:
02ED           1031   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:337: Copy_Flash_to_RAM();
02ED 120100    1032            lcall   _Copy_Flash_to_RAM
02F0           1033   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:338: ASMI_ACC_GRANTED=1;  // Release the SPI bus
02F0 D2DC      1034            setb    _ASMI_ACC_GRANTED
02F2           1035   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:339: T2CON=0;
02F2 75C800    1036            mov     _T2CON,#0x00
02F5           1037   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:340: SCON=0;
02F5 759800    1038            mov     _SCON,#0x00
02F8           1039   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:341: RCAP2H=0;
02F8 75CB00    1040            mov     _RCAP2H,#0x00
02FB           1041   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:342: RCAP2L=0;
02FB 75CA00    1042            mov     _RCAP2L,#0x00
02FE           1043   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:343: LEDRA=0xff;
02FE 75E8FF    1044            mov     _LEDRA,#0xFF
0301           1045   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:344: LEDRB=0xff;
0301 7595FF    1046            mov     _LEDRB,#0xFF
0304           1047   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:352: _endasm;
0304           1048            
0304 75C300    1049              mov _XRAMUSEDAS, #0 ; 32k RAM accessed as code
0307 758107    1050              mov sp, #7
030A           1051            
030A           1052     ; RAM is loaded with user code. Run the debugger now.
030A 02C000    1053              ljmp 0xc000
030D           1054             
030D 22        1055            ret
030E           1056   ;------------------------------------------------------------
030E           1057   ;Allocation info for local variables in function 'loadintelhex'
030E           1058   ;------------------------------------------------------------
030E           1059   ;address                   Allocated with name '_loadintelhex_address_1_103'
030E           1060   ;j                         Allocated with name '_loadintelhex_j_1_103'
030E           1061   ;size                      Allocated with name '_loadintelhex_size_1_103'
030E           1062   ;type                      Allocated with name '_loadintelhex_type_1_103'
030E           1063   ;checksum                  Allocated with name '_loadintelhex_checksum_1_103'
030E           1064   ;n                         Allocated with name '_loadintelhex_n_1_103'
030E           1065   ;echo                      Allocated with name '_loadintelhex_echo_1_103'
030E           1066   ;savedcs                   Allocated to registers r2 
030E           1067   ;------------------------------------------------------------
030E           1068   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:355: void loadintelhex (void)
030E           1069   ;        -----------------------------------------
030E           1070   ;         function loadintelhex
030E           1071   ;        -----------------------------------------
030E           1072   _loadintelhex:
030E           1073   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:362: while(1)
030E           1074   L021020?:
030E           1075   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:364: n=getchare();
030E 120100    1076            lcall   _getchare
0311 858228    1077            mov     _loadintelhex_n_1_103,dpl
0314           1078   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:366: if(n==(unsigned char)':')
0314 743A      1079            mov     a,#0x3A
0316 B52870    1080            cjne    a,_loadintelhex_n_1_103,L021040?
0319 8001      1081            sjmp    L021041?
031B           1082   L021040?:
031B 020100    1083            ljmp    L021017?
031E           1084   L021041?:
031E           1085   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:368: echo='.'; // If everything works ok, send a period...
031E 75782E    1086            mov     _loadintelhex_echo_1_103,#0x2E
0321           1087   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:369: size=getbyte();
0321 120100    1088            lcall   _getbyte
0324 858238    1089            mov     _loadintelhex_size_1_103,dpl
0327           1090   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:370: checksum=size;
0327 8538D8    1091            mov     _loadintelhex_checksum_1_103,_loadintelhex_size_1_103
032A           1092   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:372: address=getbyte();
032A 120100    1093            lcall   _getbyte
032D AA82      1094            mov     r2,dpl
032F 8A98      1095            mov     _loadintelhex_address_1_103,r2
0331 759900    1096            mov     (_loadintelhex_address_1_103 + 1),#0x00
0334           1097   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:373: checksum+=address;
0334 AA98      1098            mov     r2,_loadintelhex_address_1_103
0336 EA        1099            mov     a,r2
0337 25D8      1100            add     a,_loadintelhex_checksum_1_103
0339 F5D8      1101            mov     _loadintelhex_checksum_1_103,a
033B           1102   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:374: address*=0x100;
033B 859899    1103            mov     (_loadintelhex_address_1_103 + 1),_loadintelhex_address_1_103
033E 759800    1104            mov     _loadintelhex_address_1_103,#0x00
0341           1105   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:375: n=getbyte();
0341 120100    1106            lcall   _getbyte
0344 858228    1107            mov     _loadintelhex_n_1_103,dpl
0347           1108   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:376: checksum+=n;
0347 E528      1109            mov     a,_loadintelhex_n_1_103
0349 25D8      1110            add     a,_loadintelhex_checksum_1_103
034B F5D8      1111            mov     _loadintelhex_checksum_1_103,a
034D           1112   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:377: address+=n;
034D AA28      1113            mov     r2,_loadintelhex_n_1_103
034F 7B00      1114            mov     r3,#0x00
0351 EA        1115            mov     a,r2
0352 2598      1116            add     a,_loadintelhex_address_1_103
0354 F598      1117            mov     _loadintelhex_address_1_103,a
0356 EB        1118            mov     a,r3
0357 3599      1119            addc    a,(_loadintelhex_address_1_103 + 1)
0359 F599      1120            mov     (_loadintelhex_address_1_103 + 1),a
035B           1121   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:379: type=getbyte();
035B 120100    1122            lcall   _getbyte
035E 858288    1123            mov     _loadintelhex_type_1_103,dpl
0361           1124   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:380: checksum+=type;
0361 E588      1125            mov     a,_loadintelhex_type_1_103
0363 25D8      1126            add     a,_loadintelhex_checksum_1_103
0365 F5D8      1127            mov     _loadintelhex_checksum_1_103,a
0367           1128   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:382: for(j=0; j<size; j++)
0367 75E800    1129            mov     _loadintelhex_j_1_103,#0x00
036A           1130   L021022?:
036A C3        1131            clr     c
036B E5E8      1132            mov     a,_loadintelhex_j_1_103
036D 9538      1133            subb    a,_loadintelhex_size_1_103
036F 5001      1134            jnc     L021025?
0371           1135   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:384: n=getbyte();
0371 120100    1136            lcall   _getbyte
0374 858228    1137            mov     _loadintelhex_n_1_103,dpl
0377           1138   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:385: if(j<MAXBUFF) buff[j]=n; // Don't overrun the buffer
0377 74C0      1139            mov     a,#0x100 - 0x40
0379 25E8      1140            add     a,_loadintelhex_j_1_103
037B 4001      1141            jc      L021002?
037D E5E8      1142            mov     a,_loadintelhex_j_1_103
037F 2480      1143            add     a,#_buff
0381 F8        1144            mov     r0,a
0382 A628      1145            mov     @r0,_loadintelhex_n_1_103
0384           1146   L021002?:
0384           1147   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:386: checksum+=n;
0384 E528      1148            mov     a,_loadintelhex_n_1_103
0386 25D8      1149            add     a,_loadintelhex_checksum_1_103
0388 F5D8      1150            mov     _loadintelhex_checksum_1_103,a
038A           1151   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:382: for(j=0; j<size; j++)
038A 05E8      1152            inc     _loadintelhex_j_1_103
038C 8001      1153            sjmp    L021022?
038E           1154   L021025?:
038E           1155   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:389: savedcs=getbyte();
038E 120100    1156            lcall   _getbyte
0391           1157   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:390: checksum+=savedcs;
0391 E582      1158            mov     a,dpl
0393 FA        1159            mov     r2,a
0394 25D8      1160            add     a,_loadintelhex_checksum_1_103
0396 F5D8      1161            mov     _loadintelhex_checksum_1_103,a
0398           1162   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:391: if(size>MAXBUFF) checksum=1; // Force a checksum error
0398 E538      1163            mov     a,_loadintelhex_size_1_103
039A 24BF      1164            add     a,#0xff - 0x40
039C 5001      1165            jnc     L021004?
039E 75D801    1166            mov     _loadintelhex_checksum_1_103,#0x01
03A1           1167   L021004?:
03A1           1168   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:393: if(checksum==0) switch(type)
03A1 E5D8      1169            mov     a,_loadintelhex_checksum_1_103
03A3 7001      1170            jnz     L021012?
03A5 AA88      1171            mov     r2,_loadintelhex_type_1_103
03A7 BA0070    1172            cjne    r2,#0x00,L021046?
03AA 8001      1173            sjmp    L021006?
03AC           1174   L021046?:
03AC BA01F0    1175            cjne    r2,#0x01,L021047?
03AF 8001      1176            sjmp    L021008?
03B1           1177   L021047?:
03B1 BA0370    1178            cjne    r2,#0x03,L021048?
03B4 8001      1179            sjmp    L021007?
03B6           1180   L021048?:
03B6 BA04F0    1181            cjne    r2,#0x04,L021009?
03B9           1182   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:396: EraseSector();
03B9 120100    1183            lcall   _EraseSector
03BC           1184   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:397: LEDRA_1=1; // Flash erased
03BC D2E9      1185            setb    _LEDRA_1
03BE           1186   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:398: break;
03BE           1187   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:400: case 0: // Write to flash command.
03BE 8001      1188            sjmp    L021013?
03C0           1189   L021006?:
03C0           1190   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:401: FlashBuff(address, buff, j);
03C0 752080    1191            mov     _FlashBuff_PARM_2,#_buff
03C3 752100    1192            mov     (_FlashBuff_PARM_2 + 1),#0x00
03C6 752240    1193            mov     (_FlashBuff_PARM_2 + 2),#0x40
03C9 85E8D0    1194            mov     _FlashBuff_PARM_3,_loadintelhex_j_1_103
03CC 859882    1195            mov     dpl,_loadintelhex_address_1_103
03CF 859983    1196            mov     dph,(_loadintelhex_address_1_103 + 1)
03D2 120100    1197            lcall   _FlashBuff
03D5           1198   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:415: break;
03D5           1199   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:417: case 3: // Send ID number command.
03D5 8001      1200            sjmp    L021013?
03D7           1201   L021007?:
03D7           1202   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:418: sends("DE1");
03D7 909170    1203            mov     dptr,#__str_0
03DA 75F080    1204            mov     b,#0x80
03DD 120100    1205            lcall   _sends
03E0           1206   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:419: break;
03E0           1207   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:421: case 1: // End record
03E0 8001      1208            sjmp    L021013?
03E2           1209   L021008?:
03E2           1210   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:422: LEDRA_2=1; // Flash loaded
03E2 D2EA      1211            setb    _LEDRA_2
03E4           1212   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:423: break;
03E4           1213   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:425: default: // Unknown command;
03E4 8001      1214            sjmp    L021013?
03E6           1215   L021009?:
03E6           1216   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:426: echo='?';
03E6 75783F    1217            mov     _loadintelhex_echo_1_103,#0x3F
03E9           1218   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:427: LEDRA_2=1;
03E9 D2EA      1219            setb    _LEDRA_2
03EB           1220   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:429: }
03EB 8001      1221            sjmp    L021013?
03ED           1222   L021012?:
03ED           1223   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:432: echo='X'; // Checksum error
03ED 757858    1224            mov     _loadintelhex_echo_1_103,#0x58
03F0           1225   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:433: LEDRA_1=1;
03F0 D2E9      1226            setb    _LEDRA_1
03F2           1227   L021013?:
03F2           1228   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:435: putchar(echo);
03F2 857882    1229            mov     dpl,_loadintelhex_echo_1_103
03F5 120100    1230            lcall   _putchar
03F8 020100    1231            ljmp    L021020?
03FB           1232   L021017?:
03FB           1233   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:437: else if(n==(unsigned char)'U')
03FB 7455      1234            mov     a,#0x55
03FD B528B0    1235            cjne    a,_loadintelhex_n_1_103,L021051?
0400 8001      1236            sjmp    L021052?
0402           1237   L021051?:
0402 020100    1238            ljmp    L021020?
0405           1239   L021052?:
0405           1240   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:439: LEDRA=0;
0405 75E800    1241            mov     _LEDRA,#0x00
0408           1242   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:440: LEDRB=0;
0408 759500    1243            mov     _LEDRB,#0x00
040B           1244   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:441: LEDRA=1; // Bootloader running
040B 75E801    1245            mov     _LEDRA,#0x01
040E 020100    1246            ljmp    L021020?
0411           1247   ;------------------------------------------------------------
0411           1248   ;Allocation info for local variables in function 'str2hex'
0411           1249   ;------------------------------------------------------------
0411           1250   ;s                         Allocated to registers r2 r3 r4 
0411           1251   ;x                         Allocated to registers r5 r6 
0411           1252   ;i                         Allocated to registers r7 
0411           1253   ;sloc0                     Allocated with name '_str2hex_sloc0_1_0'
0411           1254   ;------------------------------------------------------------
0411           1255   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:446: unsigned int str2hex (char * s)
0411           1256   ;        -----------------------------------------
0411           1257   ;         function str2hex
0411           1258   ;        -----------------------------------------
0411           1259   _str2hex:
0411 AA82      1260            mov     r2,dpl
0413 AB83      1261            mov     r3,dph
0415 ACF0      1262            mov     r4,b
0417           1263   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:448: unsigned int x=0;
0417 7D00      1264            mov     r5,#0x00
0419 7E00      1265            mov     r6,#0x00
041B           1266   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:450: while(*s)
041B           1267   L022013?:
041B 8A82      1268            mov     dpl,r2
041D 8B83      1269            mov     dph,r3
041F 8CF0      1270            mov     b,r4
0421 120100    1271            lcall   __gptrget
0424 FF        1272            mov     r7,a
0425 7001      1273            jnz     L022027?
0427 020100    1274            ljmp    L022015?
042A           1275   L022027?:
042A           1276   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:452: if((*s>='0')&&(*s<='9')) i=*s-'0';
042A C3        1277            clr     c
042B EF        1278            mov     a,r7
042C 6480      1279            xrl     a,#0x80
042E 94B0      1280            subb    a,#0xb0
0430 4001      1281            jc      L022010?
0432 74B9      1282            mov     a,#(0x39 ^ 0x80)
0434 8FF0      1283            mov     b,r7
0436 63F080    1284            xrl     b,#0x80
0439 95F0      1285            subb    a,b
043B 4001      1286            jc      L022010?
043D EF        1287            mov     a,r7
043E 24D0      1288            add     a,#0xd0
0440 FF        1289            mov     r7,a
0441 8001      1290            sjmp    L022011?
0443           1291   L022010?:
0443           1292   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:453: else if ( (*s>='A') && (*s<='F') ) i=*s-'A'+10;
0443 8A82      1293            mov     dpl,r2
0445 8B83      1294            mov     dph,r3
0447 8CF0      1295            mov     b,r4
0449 120100    1296            lcall   __gptrget
044C F8        1297            mov     r0,a
044D C3        1298            clr     c
044E 6480      1299            xrl     a,#0x80
0450 94C1      1300            subb    a,#0xc1
0452 4001      1301            jc      L022006?
0454 74C6      1302            mov     a,#(0x46 ^ 0x80)
0456 88F0      1303            mov     b,r0
0458 63F080    1304            xrl     b,#0x80
045B 95F0      1305            subb    a,b
045D 4001      1306            jc      L022006?
045F 74C9      1307            mov     a,#0xC9
0461 28        1308            add     a,r0
0462 FF        1309            mov     r7,a
0463 8001      1310            sjmp    L022011?
0465           1311   L022006?:
0465           1312   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:454: else if ( (*s>='a') && (*s<='f') ) i=*s-'a'+10;
0465 C3        1313            clr     c
0466 E8        1314            mov     a,r0
0467 6480      1315            xrl     a,#0x80
0469 94E1      1316            subb    a,#0xe1
046B 4001      1317            jc      L022015?
046D 74E6      1318            mov     a,#(0x66 ^ 0x80)
046F 88F0      1319            mov     b,r0
0471 63F080    1320            xrl     b,#0x80
0474 95F0      1321            subb    a,b
0476 4001      1322            jc      L022015?
0478 74A9      1323            mov     a,#0xA9
047A 28        1324            add     a,r0
047B FF        1325            mov     r7,a
047C           1326   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:455: else break;
047C           1327   L022011?:
047C           1328   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:456: x=(x*0x10)+i;
047C 8DC8      1329            mov     _str2hex_sloc0_1_0,r5
047E EE        1330            mov     a,r6
047F C4        1331            swap    a
0480 54F0      1332            anl     a,#0xf0
0482 C5C8      1333            xch     a,_str2hex_sloc0_1_0
0484 C4        1334            swap    a
0485 C5C8      1335            xch     a,_str2hex_sloc0_1_0
0487 65C8      1336            xrl     a,_str2hex_sloc0_1_0
0489 C5C8      1337            xch     a,_str2hex_sloc0_1_0
048B 54F0      1338            anl     a,#0xf0
048D C5C8      1339            xch     a,_str2hex_sloc0_1_0
048F 65C8      1340            xrl     a,_str2hex_sloc0_1_0
0491 F5C9      1341            mov     (_str2hex_sloc0_1_0 + 1),a
0493 7800      1342            mov     r0,#0x00
0495 EF        1343            mov     a,r7
0496 25C8      1344            add     a,_str2hex_sloc0_1_0
0498 FD        1345            mov     r5,a
0499 E8        1346            mov     a,r0
049A 35C9      1347            addc    a,(_str2hex_sloc0_1_0 + 1)
049C FE        1348            mov     r6,a
049D           1349   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:457: s++;
049D 0A        1350            inc     r2
049E BA00B0    1351            cjne    r2,#0x00,L022034?
04A1 0B        1352            inc     r3
04A2           1353   L022034?:
04A2 020100    1354            ljmp    L022013?
04A5           1355   L022015?:
04A5           1356   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:459: return x;
04A5 8D82      1357            mov     dpl,r5
04A7 8E83      1358            mov     dph,r6
04A9 22        1359            ret
04AA           1360   ;------------------------------------------------------------
04AA           1361   ;Allocation info for local variables in function 'OutByte'
04AA           1362   ;------------------------------------------------------------
04AA           1363   ;x                         Allocated to registers r2 
04AA           1364   ;------------------------------------------------------------
04AA           1365   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:462: void OutByte (unsigned char x)
04AA           1366   ;        -----------------------------------------
04AA           1367   ;         function OutByte
04AA           1368   ;        -----------------------------------------
04AA           1369   _OutByte:
04AA           1370   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:464: putchar(hexval[x/0x10]);
04AA E582      1371            mov     a,dpl
04AC FA        1372            mov     r2,a
04AD C4        1373            swap    a
04AE 540F      1374            anl     a,#0x0f
04B0 9011D0    1375            mov     dptr,#_hexval
04B3 93        1376            movc    a,@a+dptr
04B4 F582      1377            mov     dpl,a
04B6 C002      1378            push    ar2
04B8 120100    1379            lcall   _putchar
04BB D002      1380            pop     ar2
04BD           1381   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:465: putchar(hexval[x%0x10]);
04BD 740F      1382            mov     a,#0x0F
04BF 5A        1383            anl     a,r2
04C0 9011D0    1384            mov     dptr,#_hexval
04C3 93        1385            movc    a,@a+dptr
04C4 F582      1386            mov     dpl,a
04C6 020100    1387            ljmp    _putchar
04C9           1388   ;------------------------------------------------------------
04C9           1389   ;Allocation info for local variables in function 'OutWord'
04C9           1390   ;------------------------------------------------------------
04C9           1391   ;x                         Allocated to registers r2 r3 
04C9           1392   ;------------------------------------------------------------
04C9           1393   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:468: void OutWord (unsigned int x)
04C9           1394   ;        -----------------------------------------
04C9           1395   ;         function OutWord
04C9           1396   ;        -----------------------------------------
04C9           1397   _OutWord:
04C9 AA82      1398            mov     r2,dpl
04CB AB83      1399            mov     r3,dph
04CD           1400   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:470: OutByte(x/0x100);
04CD 8B04      1401            mov     ar4,r3
04CF 8C82      1402            mov     dpl,r4
04D1 C002      1403            push    ar2
04D3 C003      1404            push    ar3
04D5 120100    1405            lcall   _OutByte
04D8 D003      1406            pop     ar3
04DA D002      1407            pop     ar2
04DC           1408   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:471: OutByte(x%0x100);
04DC 8A82      1409            mov     dpl,r2
04DE 020100    1410            ljmp    _OutByte
04E1           1411   ;------------------------------------------------------------
04E1           1412   ;Allocation info for local variables in function 'Manual_Load'
04E1           1413   ;------------------------------------------------------------
04E1           1414   ;add                       Allocated to registers r2 r3 
04E1           1415   ;j                         Allocated to registers r4 r5 
04E1           1416   ;val                       Allocated to registers r4 
04E1           1417   ;h_add                     Allocated to registers r4 
04E1           1418   ;l_add                     Allocated to registers r5 
04E1           1419   ;------------------------------------------------------------
04E1           1420   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:477: void Manual_Load (void)
04E1           1421   ;        -----------------------------------------
04E1           1422   ;         function Manual_Load
04E1           1423   ;        -----------------------------------------
04E1           1424   _Manual_Load:
04E1           1425   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:483: Copy_Flash_to_RAM();
04E1 120100    1426            lcall   _Copy_Flash_to_RAM
04E4           1427   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:485: LEDRA=0;
04E4 75E800    1428            mov     _LEDRA,#0x00
04E7           1429   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:486: LEDRB=0;
04E7 759500    1430            mov     _LEDRB,#0x00
04EA           1431   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:488: add=0;
04EA 7A00      1432            mov     r2,#0x00
04EC 7B00      1433            mov     r3,#0x00
04EE           1434   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:490: while(1)
04EE           1435   L025034?:
04EE           1436   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:493: h_add=add/0x100;
04EE 8B04      1437            mov     ar4,r3
04F0           1438   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:494: l_add=add%0x100;
04F0 8A05      1439            mov     ar5,r2
04F2           1440   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:495: HEX5=seven_seg[h_add/0x10];
04F2 EC        1441            mov     a,r4
04F3 C4        1442            swap    a
04F4 540F      1443            anl     a,#0x0f
04F6 901190    1444            mov     dptr,#_seven_seg
04F9 93        1445            movc    a,@a+dptr
04FA F58F      1446            mov     _HEX5,a
04FC           1447   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:496: HEX4=seven_seg[h_add%0x10];
04FC 740F      1448            mov     a,#0x0F
04FE 5C        1449            anl     a,r4
04FF 901190    1450            mov     dptr,#_seven_seg
0502 93        1451            movc    a,@a+dptr
0503 F58E      1452            mov     _HEX4,a
0505           1453   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:497: HEX3=seven_seg[l_add/0x10];
0505 ED        1454            mov     a,r5
0506 C4        1455            swap    a
0507 540F      1456            anl     a,#0x0f
0509 901190    1457            mov     dptr,#_seven_seg
050C 93        1458            movc    a,@a+dptr
050D F594      1459            mov     _HEX3,a
050F           1460   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:498: HEX2=seven_seg[l_add%0x10];
050F 740F      1461            mov     a,#0x0F
0511 5D        1462            anl     a,r5
0512 901190    1463            mov     dptr,#_seven_seg
0515 93        1464            movc    a,@a+dptr
0516 F593      1465            mov     _HEX2,a
0518           1466   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:500: val=Read_XRAM(add);
0518 8A82      1467            mov     dpl,r2
051A 8B83      1468            mov     dph,r3
051C C002      1469            push    ar2
051E C003      1470            push    ar3
0520 120100    1471            lcall   _Read_XRAM
0523 AC82      1472            mov     r4,dpl
0525 D003      1473            pop     ar3
0527 D002      1474            pop     ar2
0529           1475   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:501: HEX1=seven_seg[val/0x10];
0529 EC        1476            mov     a,r4
052A C4        1477            swap    a
052B 540F      1478            anl     a,#0x0f
052D FD        1479            mov     r5,a
052E 901190    1480            mov     dptr,#_seven_seg
0531 93        1481            movc    a,@a+dptr
0532 F592      1482            mov     _HEX1,a
0534           1483   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:502: HEX0=seven_seg[val%0x10];
0534 740F      1484            mov     a,#0x0F
0536 5C        1485            anl     a,r4
0537 901190    1486            mov     dptr,#_seven_seg
053A 93        1487            movc    a,@a+dptr
053B F591      1488            mov     _HEX0,a
053D           1489   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:504: if(KEY_1==0)
053D 30F930    1490            jnb     _KEY_1,L025058?
0540 020100    1491            ljmp    L025031?
0543           1492   L025058?:
0543           1493   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:506: while (KEY_1==0); // Wait for key release
0543           1494   L025001?:
0543 30F9B0    1495            jnb     _KEY_1,L025001?
0546           1496   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:507: if((SWB&0x03)==0x01) // Reading address low
0546 7403      1497            mov     a,#0x03
0548 5595      1498            anl     a,_SWB
054A FC        1499            mov     r4,a
054B BC01F0    1500            cjne    r4,#0x01,L025013?
054E           1501   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:509: add&=0x7f00;
054E 7A00      1502            mov     r2,#0x00
0550 53037F    1503            anl     ar3,#0x7F
0553           1504   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:510: add|=SWA;    
0553 ACE8      1505            mov     r4,_SWA
0555 7D00      1506            mov     r5,#0x00
0557 EC        1507            mov     a,r4
0558 4202      1508            orl     ar2,a
055A ED        1509            mov     a,r5
055B 4203      1510            orl     ar3,a
055D 020100    1511            ljmp    L025034?
0560           1512   L025013?:
0560           1513   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:512: else if((SWB&0x03)==0x02) // Reading address high
0560 7403      1514            mov     a,#0x03
0562 5595      1515            anl     a,_SWB
0564 FC        1516            mov     r4,a
0565 BC0230    1517            cjne    r4,#0x02,L025010?
0568           1518   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:514: add&=0x00ff;
0568 7B00      1519            mov     r3,#0x00
056A           1520   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:515: add|=(SWA*0x100);    
056A ACE8      1521            mov     r4,_SWA
056C 8C05      1522            mov     ar5,r4
056E E4        1523            clr     a
056F FC        1524            mov     r4,a
0570 4202      1525            orl     ar2,a
0572 ED        1526            mov     a,r5
0573 4203      1527            orl     ar3,a
0575 020100    1528            ljmp    L025034?
0578           1529   L025010?:
0578           1530   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:517: else if ((SWB&0x03)==0x00) // Reading data
0578 E595      1531            mov     a,_SWB
057A 5403      1532            anl     a,#0x03
057C 7001      1533            jnz     L025007?
057E           1534   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:519: val=SWA;
057E 85E850    1535            mov     _Write_XRAM_PARM_2,_SWA
0581           1536   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:520: Write_XRAM(add, val);
0581 8A82      1537            mov     dpl,r2
0583 8B83      1538            mov     dph,r3
0585 C002      1539            push    ar2
0587 C003      1540            push    ar3
0589 120100    1541            lcall   _Write_XRAM
058C D003      1542            pop     ar3
058E D002      1543            pop     ar2
0590 020100    1544            ljmp    L025034?
0593           1545   L025007?:
0593           1546   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:522: else if((SWB&0x03)==0x03) //Save RAM to flash
0593 7403      1547            mov     a,#0x03
0595 5595      1548            anl     a,_SWB
0597 FC        1549            mov     r4,a
0598 BC03B0    1550            cjne    r4,#0x03,L025066?
059B 8001      1551            sjmp    L025067?
059D           1552   L025066?:
059D 020100    1553            ljmp    L025034?
05A0           1554   L025067?:
05A0           1555   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:524: EraseSector();
05A0 C002      1556            push    ar2
05A2 C003      1557            push    ar3
05A4 120100    1558            lcall   _EraseSector
05A7 D003      1559            pop     ar3
05A9 D002      1560            pop     ar2
05AB           1561   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:525: LEDRA_1=1;
05AB D2E9      1562            setb    _LEDRA_1
05AD           1563   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:526: for(j=0; j<0x8000; j+=PAGE_SIZE)
05AD 7C00      1564            mov     r4,#0x00
05AF 7D00      1565            mov     r5,#0x00
05B1           1566   L025036?:
05B1 7480      1567            mov     a,#0x100 - 0x80
05B3 2D        1568            add     a,r5
05B4 4001      1569            jc      L025039?
05B6           1570   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:528: FlashBuff(j, (unsigned char xdata *)j, PAGE_SIZE);
05B6 8C06      1571            mov     ar6,r4
05B8 8D07      1572            mov     ar7,r5
05BA 8E20      1573            mov     _FlashBuff_PARM_2,r6
05BC 8F21      1574            mov     (_FlashBuff_PARM_2 + 1),r7
05BE 752200    1575            mov     (_FlashBuff_PARM_2 + 2),#0x00
05C1 75D040    1576            mov     _FlashBuff_PARM_3,#0x40
05C4 8C82      1577            mov     dpl,r4
05C6 8D83      1578            mov     dph,r5
05C8 C002      1579            push    ar2
05CA C003      1580            push    ar3
05CC C004      1581            push    ar4
05CE C005      1582            push    ar5
05D0 120100    1583            lcall   _FlashBuff
05D3 D005      1584            pop     ar5
05D5 D004      1585            pop     ar4
05D7 D003      1586            pop     ar3
05D9 D002      1587            pop     ar2
05DB           1588   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:526: for(j=0; j<0x8000; j+=PAGE_SIZE)
05DB 7440      1589            mov     a,#0x40
05DD 2C        1590            add     a,r4
05DE FC        1591            mov     r4,a
05DF E4        1592            clr     a
05E0 3D        1593            addc    a,r5
05E1 FD        1594            mov     r5,a
05E2 8001      1595            sjmp    L025036?
05E4           1596   L025039?:
05E4           1597   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:530: LEDRA_2=1;
05E4 D2EA      1598            setb    _LEDRA_2
05E6 020100    1599            ljmp    L025034?
05E9           1600   L025031?:
05E9           1601   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:533: else if(KEY_3==0) // Increment address
05E9 20FBB0    1602            jb      _KEY_3,L025028?
05EC           1603   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:535: while(KEY_3==0); // Wait for key release
05EC           1604   L025015?:
05EC 30FBF0    1605            jnb     _KEY_3,L025015?
05EF           1606   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:536: LEDRA_1=0;
05EF C2E9      1607            clr     _LEDRA_1
05F1           1608   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:537: LEDRA_2=0;
05F1 C2EA      1609            clr     _LEDRA_2
05F3           1610   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:538: add++;
05F3 0A        1611            inc     r2
05F4 BA0030    1612            cjne    r2,#0x00,L025071?
05F7 0B        1613            inc     r3
05F8           1614   L025071?:
05F8           1615   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:539: if (add>0x7fff) add=0;
05F8 C3        1616            clr     c
05F9 74FF      1617            mov     a,#0xFF
05FB 9A        1618            subb    a,r2
05FC 747F      1619            mov     a,#0x7F
05FE 9B        1620            subb    a,r3
05FF 4001      1621            jc      L025072?
0601 020100    1622            ljmp    L025034?
0604           1623   L025072?:
0604 7A00      1624            mov     r2,#0x00
0606 7B00      1625            mov     r3,#0x00
0608 020100    1626            ljmp    L025034?
060B           1627   L025028?:
060B           1628   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:541: else if (KEY_2==0) // Decrement address
060B 30FAB0    1629            jnb     _KEY_2,L025073?
060E 020100    1630            ljmp    L025034?
0611           1631   L025073?:
0611           1632   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:543: while(KEY_2==0); // Wait for key release
0611           1633   L025020?:
0611 30FAF0    1634            jnb     _KEY_2,L025020?
0614           1635   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:544: LEDRA_1=0;
0614 C2E9      1636            clr     _LEDRA_1
0616           1637   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:545: LEDRA_2=0;
0616 C2EA      1638            clr     _LEDRA_2
0618           1639   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:546: add--;
0618 1A        1640            dec     r2
0619 BAFF30    1641            cjne    r2,#0xff,L025075?
061C 1B        1642            dec     r3
061D           1643   L025075?:
061D           1644   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:547: if (add>0x7fff) add=0x7fff;
061D C3        1645            clr     c
061E 74FF      1646            mov     a,#0xFF
0620 9A        1647            subb    a,r2
0621 747F      1648            mov     a,#0x7F
0623 9B        1649            subb    a,r3
0624 4001      1650            jc      L025076?
0626 020100    1651            ljmp    L025034?
0629           1652   L025076?:
0629 7AFF      1653            mov     r2,#0xFF
062B 7B7F      1654            mov     r3,#0x7F
062D 020100    1655            ljmp    L025034?
0630           1656   ;------------------------------------------------------------
0630           1657   ;Allocation info for local variables in function 'main'
0630           1658   ;------------------------------------------------------------
0630           1659   ;d                         Allocated to registers r2 
0630           1660   ;j                         Allocated to registers r2 r3 
0630           1661   ;------------------------------------------------------------
0630           1662   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:561: void main (void)
0630           1663   ;        -----------------------------------------
0630           1664   ;         function main
0630           1665   ;        -----------------------------------------
0630           1666   _main:
0630           1667   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:566: ASMI_ACC_GRANTED=0;  // Acquire the SPI bus
0630 C2DC      1668            clr     _ASMI_ACC_GRANTED
0632           1669   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:568: if( (KEY_1==1) && (KEY_2==1) && (KEY_3==1) ) Load_Ram_Fast_and_Run();
0632 30F9B0    1670            jnb     _KEY_1,L026002?
0635 30FAB0    1671            jnb     _KEY_2,L026002?
0638 30FBB0    1672            jnb     _KEY_3,L026002?
063B 120100    1673            lcall   _Load_Ram_Fast_and_Run
063E           1674   L026002?:
063E           1675   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:570: if (KEY_3==0) // Run debugger?
063E 20FBF0    1676            jb      _KEY_3,L026009?
0641           1677   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:572: HEX5=LetterD;
0641 758FA1    1678            mov     _HEX5,#0xA1
0644           1679   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:573: HEX4=LetterE;
0644 758E86    1680            mov     _HEX4,#0x86
0647           1681   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:574: HEX3=LetterB;
0647 759483    1682            mov     _HEX3,#0x83
064A           1683   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:575: HEX2=LetterU;
064A 7593C1    1684            mov     _HEX2,#0xC1
064D           1685   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:576: HEX1=LetterG;
064D 7592C2    1686            mov     _HEX1,#0xC2
0650           1687   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:577: HEX0=LetterG;
0650 7591C2    1688            mov     _HEX0,#0xC2
0653           1689   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:580: while(KEY_3==0);
0653           1690   L026005?:
0653 30FB30    1691            jnb     _KEY_3,L026005?
0656           1692   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:582: HEX0=0xff;
0656 7591FF    1693            mov     _HEX0,#0xFF
0659           1694   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:583: HEX1=0xff;
0659 7592FF    1695            mov     _HEX1,#0xFF
065C           1696   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:584: HEX2=0xff;
065C 7593FF    1697            mov     _HEX2,#0xFF
065F           1698   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:585: HEX3=0xff;
065F 7594FF    1699            mov     _HEX3,#0xFF
0662           1700   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:586: HEX4=0xff;
0662 758EFF    1701            mov     _HEX4,#0xFF
0665           1702   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:587: HEX5=0xff;
0665 758FFF    1703            mov     _HEX5,#0xFF
0668           1704   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:589: Load_Ram_Fast_and_Run_Debugger();
0668 120100    1705            lcall   _Load_Ram_Fast_and_Run_Debugger
066B           1706   L026009?:
066B           1707   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:592: if (KEY_2==0) // Byte by Byte code loader
066B 20FA70    1708            jb      _KEY_2,L026014?
066E           1709   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:594: HEX5=Dash;
066E 758FBF    1710            mov     _HEX5,#0xBF
0671           1711   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:595: HEX4=Dash;
0671 758EBF    1712            mov     _HEX4,#0xBF
0674           1713   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:596: HEX3=Dash;
0674 7594BF    1714            mov     _HEX3,#0xBF
0677           1715   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:597: HEX2=Dash;
0677 7593BF    1716            mov     _HEX2,#0xBF
067A           1717   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:598: HEX1=Dash;
067A 7592BF    1718            mov     _HEX1,#0xBF
067D           1719   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:599: HEX0=Dash;
067D 7591BF    1720            mov     _HEX0,#0xBF
0680           1721   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:601: while(KEY_2==0);
0680           1722   L026010?:
0680 30FAB0    1723            jnb     _KEY_2,L026010?
0683           1724   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:603: Manual_Load();
0683 120100    1725            lcall   _Manual_Load
0686           1726   L026014?:
0686           1727   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:606: XRAMUSEDAS=1; // 32k RAM accessed as xdata
0686 75C301    1728            mov     _XRAMUSEDAS,#0x01
0689           1729   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:608: HEX3=LetterB;
0689 759483    1730            mov     _HEX3,#0x83
068C           1731   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:609: HEX2=LetterO;
068C 7593A3    1732            mov     _HEX2,#0xA3
068F           1733   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:610: HEX1=LetterO;
068F 7592A3    1734            mov     _HEX1,#0xA3
0692           1735   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:611: HEX0=LetterT;
0692 759187    1736            mov     _HEX0,#0x87
0695           1737   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:613: while(KEY_1==0); // Wait for key release
0695           1738   L026015?:
0695 30F9F0    1739            jnb     _KEY_1,L026015?
0698           1740   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:615: LEDRA=1;// Bootloader running
0698 75E801    1741            mov     _LEDRA,#0x01
069B           1742   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:616: LEDRB=0;
069B 759500    1743            mov     _LEDRB,#0x00
069E           1744   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:618: HEX0=0xff;
069E 7591FF    1745            mov     _HEX0,#0xFF
06A1           1746   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:619: HEX1=0xff;
06A1 7592FF    1747            mov     _HEX1,#0xFF
06A4           1748   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:620: HEX2=0xff;
06A4 7593FF    1749            mov     _HEX2,#0xFF
06A7           1750   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:621: HEX3=0xff;
06A7 7594FF    1751            mov     _HEX3,#0xFF
06AA           1752   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:622: HEX4=0xff;
06AA 758EFF    1753            mov     _HEX4,#0xFF
06AD           1754   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:623: HEX5=0xff;
06AD 758FFF    1755            mov     _HEX5,#0xFF
06B0           1756   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:625: inituart();
06B0 120100    1757            lcall   _inituart
06B3           1758   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:629: Write_XRAM(MEMORY_KEY, 0x00);
06B3 755000    1759            mov     _Write_XRAM_PARM_2,#0x00
06B6 907FFF    1760            mov     dptr,#0x7FFF
06B9 120100    1761            lcall   _Write_XRAM
06BC           1762   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:632: while(1)
06BC           1763   L026025?:
06BC           1764   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:634: if (RI==1)
06BC 309870    1765            jnb     _RI,L026021?
06BF           1766   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:636: d=SBUF;
06BF AA99      1767            mov     r2,_SBUF
06C1           1768   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:637: RI=0;
06C1 C298      1769            clr     _RI
06C3           1770   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:638: if(d==(unsigned char)'U') break;
06C3 BA55B0    1771            cjne    r2,#0x55,L026060?
06C6 8001      1772            sjmp    L026026?
06C8           1773   L026060?:
06C8           1774   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:639: TI=0; // Echo what was received
06C8 C299      1775            clr     _TI
06CA           1776   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:640: SBUF=d;
06CA 8A99      1777            mov     _SBUF,r2
06CC           1778   L026021?:
06CC           1779   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:643: if(Read_XRAM(MEMORY_KEY)!=0x00)
06CC 907FFF    1780            mov     dptr,#0x7FFF
06CF 120100    1781            lcall   _Read_XRAM
06D2 E582      1782            mov     a,dpl
06D4 6001      1783            jz      L026025?
06D6           1784   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:645: LEDRA_1=0;
06D6 C2E9      1785            clr     _LEDRA_1
06D8           1786   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:646: LEDRA_2=0;
06D8 C2EA      1787            clr     _LEDRA_2
06DA           1788   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:647: Write_XRAM(MEMORY_KEY, 0x00);
06DA 755000    1789            mov     _Write_XRAM_PARM_2,#0x00
06DD 907FFF    1790            mov     dptr,#0x7FFF
06E0 120100    1791            lcall   _Write_XRAM
06E3           1792   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:648: EraseSector();
06E3 120100    1793            lcall   _EraseSector
06E6           1794   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:649: LEDRA_1=1;
06E6 D2E9      1795            setb    _LEDRA_1
06E8           1796   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:650: for(j=0; j<0x8000; j+=PAGE_SIZE)
06E8 7A00      1797            mov     r2,#0x00
06EA 7B00      1798            mov     r3,#0x00
06EC           1799   L026027?:
06EC 7480      1800            mov     a,#0x100 - 0x80
06EE 2B        1801            add     a,r3
06EF 4001      1802            jc      L026030?
06F1           1803   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:652: FlashBuff(j, (unsigned char xdata *)j, PAGE_SIZE);
06F1 8A04      1804            mov     ar4,r2
06F3 8B05      1805            mov     ar5,r3
06F5 8C20      1806            mov     _FlashBuff_PARM_2,r4
06F7 8D21      1807            mov     (_FlashBuff_PARM_2 + 1),r5
06F9 752200    1808            mov     (_FlashBuff_PARM_2 + 2),#0x00
06FC 75D040    1809            mov     _FlashBuff_PARM_3,#0x40
06FF 8A82      1810            mov     dpl,r2
0701 8B83      1811            mov     dph,r3
0703 C002      1812            push    ar2
0705 C003      1813            push    ar3
0707 120100    1814            lcall   _FlashBuff
070A D003      1815            pop     ar3
070C D002      1816            pop     ar2
070E           1817   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:650: for(j=0; j<0x8000; j+=PAGE_SIZE)
070E 7440      1818            mov     a,#0x40
0710 2A        1819            add     a,r2
0711 FA        1820            mov     r2,a
0712 E4        1821            clr     a
0713 3B        1822            addc    a,r3
0714 FB        1823            mov     r3,a
0715 8001      1824            sjmp    L026027?
0717           1825   L026030?:
0717           1826   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:654: LEDRA_2=1;
0717 D2EA      1827            setb    _LEDRA_2
0719 8001      1828            sjmp    L026025?
071B           1829   L026026?:
071B           1830   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:658: loadintelhex();
071B 020100    1831            ljmp    _loadintelhex
071E           1832   ;------------------------------------------------------------
071E           1833   ;Allocation info for local variables in function 'dummy_switch'
071E           1834   ;------------------------------------------------------------
071E           1835   ;------------------------------------------------------------
071E           1836   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:661: void dummy_switch(void) __naked
071E           1837   ;        -----------------------------------------
071E           1838   ;         function dummy_switch
071E           1839   ;        -----------------------------------------
071E           1840   _dummy_switch:
071E           1841   ;        naked function: no prologue.
071E           1842   ;        C:\Source\SOC_8052\Boot\CV_Boot_SPI.c:673: _endasm;
071E           1843            
FFE0           1844              CSEG at 0xFFE0
FFE0 75C300    1845              mov _XRAMUSEDAS, #0x00 ; 32k RAM accessed as code
FFE3 00        1846              nop
FFE4 22        1847              ret
FFE5           1848            
FFE8           1849              CSEG at 0xffE8
FFE8 75C301    1850              mov _XRAMUSEDAS, #0x01 ; 32k RAM accessed as xdata
FFEB 00        1851              nop
FFEC 22        1852              ret
FFED           1853             
FFED           1854   ;        naked function: no epilogue.
0000           1855            rseg R_CSEG
0000           1856   
0000           1857            rseg R_XINIT
0000           1858   
0000           1859            rseg R_CONST
0000           1860   _hexval:
0000 30313233  1861            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0010 00        1862            db 0x00
0011           1863   __str_0:
0011 444531    1864            db 'DE1'
0014 00        1865            db 0x00
0015           1866   _seven_seg:
0015 C0        1867            db 0xc0         ; 192
0016 F9        1868            db 0xf9         ; 249
0017 A4        1869            db 0xa4         ; 164
0018 B0        1870            db 0xb0         ; 176
0019 99        1871            db 0x99         ; 153
001A 92        1872            db 0x92         ; 146
001B 82        1873            db 0x82         ; 130
001C F8        1874            db 0xf8         ; 248
001D 80        1875            db 0x80         ; 128
001E 90        1876            db 0x90         ; 144
001F 88        1877            db 0x88         ; 136
0020 83        1878            db 0x83         ; 131
0021 C6        1879            db 0xc6         ; 198
0022 A1        1880            db 0xa1         ; 161
0023 86        1881            db 0x86         ; 134
0024 8E        1882            db 0x8e         ; 142
0025           1883   
FFED           1884            CSEG
FFED           1885   
FFED           1886   end
